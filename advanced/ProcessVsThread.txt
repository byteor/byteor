Guidelines to Decide Which Concurrency Model Best Suits Your Program
====================================================================

1. All threads in a program must run the same executable. A child process, on the
   other hand, may run a different executable by calling an exec function.

2. An errant thread can harm other threads in the same process because threads
   share the same virtual memory space and other resources. For instance, a wild
   memory write through an uninitialized pointer in one thread can corrupt memory
   visible to another thread.

   An errant process, on the other hand, cannot do so because each process has a
   copy of the program's memory space.

3. Copying memory for a new process adds an additional performance overhead relative
   to creating a new thread. However, the copy is performed only when the memory
   is changed, so the penalty is minimal if the child process only reads memory.

4. Threads should be used for programs that need fine-grained parallelism. For
   example, if a problem can be borken into multiple, nearly identical tasks, threads
   may be a good choice. Processes should be used for programs taht need coarser
   parallelism.

5. Sharing data aomong threads is trivial because threads share the same memory.
   (However, great care must be taken to avoid race conditions, as described
   previously.) Sharing data among processes requires the use of IPC mechanisms, This
   can be more cumbersome but makes multiple processes less likely to suffer from
   concurrency bugs.
