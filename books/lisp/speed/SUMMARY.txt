Summary
=======

1. Optimization should not begin too early, should be focused on bottlenecks,
   and should begin with algorithms.

2. Five parameters control compilation. They can be set with local or global
   declarations.

3. A good compiler can optimize tail calls, turning a tail-recursive function
   into a loop. Inline compilation is another way to avoid function calls.

4. Type declarations are not necessary, but they can make a program more
   efficient. Type declarations are especially important in numeric code, and
   code that deals with arrays.

5. Consing less can make a program faster, especially in implementations with
   primitive garbage collectors. Solutions include using destructive functions,
   pre-allocating blocks of space, and stack allocation.

6. In some situations, it might pay to draw objects from a pre-allocated pool.

7. Some parts of Common Lisp are designed for speed and others for flexibility.

8. Programming necessarily involves exploration. Exploration and optimization
   should be separated -- sometimes even to the extent of using different
   languages for each.
