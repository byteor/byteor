# Slab Cache

1. For frequently used objects, the kernel defines its own cache that contains
   only instances of the desired type. Each time one of the objects is required,
   it can be quickly removed from the cache (and returned there after use); the
   slab cache automatically takes care of interaction with the buddy system and
   requests new page frames when the existing caches are full.

2. For the general allocation of smaller memory blocks, the kernel defines a set
   of slab caches for various object sizes that it can access using the same
   functions with which we are familiar from userspace programming; a prefixed k
   indicates that these functions are associated with the kernel: kmalloc and
   kfree.

# slob

The slob allocator is especially optimized for low code size. It is centered
around a simple linked lists of blocks (thus its name). To allocate memory, a
likewise simple first-fit algorithm is used. With only roughly 600 lines, the
total footprint of the slob allocator is very small. Naturally, it is not the
most efficient allocator in terms of speed and is definitely not designed to be
used on large-scale systems.

# slub

The slub allocator tries to minimize the required memory overhead by packing
page frames into groups and to manage these groups by overloading unused fields
in struct page. While this certainly does not simplify the definition of this
structure, as you have seen before, the effort is justified by the better
performance of slub in contrast to slab on large machines.
