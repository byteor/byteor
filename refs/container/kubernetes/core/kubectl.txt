# kubectl

## Help

kubectl -h
kubectl options
kubectl <command> --help
kubectl [command] [PARAMS] -o=<format>
kubectl explain [RESOURCE]

## Configuration

kubectl config set-credentials myself --username=admin --password=secret
kubectl config set-cluster local-server --server=http://localhost:8080
kubectl config set-context default-context --cluster=local-server --user=myself --namespace=default
kubectl config use-context default-context
kubectl config view

## Frequently Used Command

Create: kubectl run <name> --image=<image> or kubectl create -f manifest.yaml
 Query: kubectl get <resource>
Update: kubectl set or kubectl patch
Delete: kubectl delete <resource> <name> or kubectl delete -f manifest.yaml
Pod IP: kubectl get pod <pod-name> -o jsonpath='{.status.podIP}'
Exec Cmd: kubectl exec -ti <pod-name> sh
Pod Log: kubectl logs [-f] <pod-name>
Service: kubectl expose deploy <name> --port=80
Base64: kubectl get secret SECRET -o go-template='{{.data.KEY | base64encode }}'

## Bash Completion

source <(kubectl completion bash)

## Logs

;; Return snapshot logs from pod nginx with only one container
kubectl logs nginx

;; Return snapshot of previous terminated ruby container logs from pod web-1
kubectl logs -p -c ruby web-1

;; Begin streaming the logs of the ruby container in pod web-1
kubectl logs -f -c ruby web-1

## Connect to Running Pod

;; Get output from running pod 123456-7890, using the first container by default
kubectl attach 123456-7890

;; Get output from ruby-container from pod 123456-7890
kubectl attach 123456-7890 -c ruby-container

;; Switch to raw terminal mode, sends stdin to 'bash' in ruby-container from pod
;; 123456-7890 and sends stdout/stderr from 'bash' back to the client
kubectl attach 123456-7890 -c ruby-container -i -t

Options:
  -c, --container='': Container name. if omitted, the first container in the pod will be chosen
  -i, --stdin=false: Pass stdin to the container
  -t, --tyy=false: Stdin is a TTY

## Execute Command in Pod's Container

;; Get output from running 'date' from pod 123456-7890, using the first container by default
kubectl exec 123456-7890 date

;; Get output from running 'date' in ruby-container from pod 123456-7890
kubectl exec 123456-7890 -c ruby-container date

;; Switch to raw terminal mode, sends stdin to 'base' in ruby-container from pod 13456-7890
;; and sends stdout/stderr from 'bash' back to the client
kubectl exec 123456-7890 -c ruby-container -i -t -- bash -il

Options:
  -c, --container='': Container name. if omitted, the first container in the pod will be chosen
  -i, --stdin=false: Pass stdin to the container
  -t, --tyy=false: Stdin is a TTY

## Port Forwarding

;; Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in the pod
kubectl port-forward mypod 5000 6000

;; Listen on ports 8888 locally, forwarding to 5000 in the pod
kubectl port-forward mypod 8888:5000

;; Listen on a random port locally, forwarding to 5000 in the pod
kubectl port-forward mypod :5000

;; Listen on a random port locally, forwarding to 5000 in the pod
kubectl port-forward mypod 0:5000

;; Forward to deployment
kubectl port-forward deployment/redis-master 6379:6379

;; Forward to replicaSet
kubectl port-forward rs/redis-master 6379:6379

;; Forward to service
kubectl port-forward svc/redis-master 6379:6379

## API Server Proxy

$ kubectl proxy --port=8080
Starting to serve on 127.0.0.1:8080

;; Access kubernetes api
$ curl http://localhost:8080/api/v1/namespaces/default/pods

;; Accept any insecure access from anywhere. (NOTE: not recommend in production)
$ kubectl proxy --address='0.0.0.0' --port=8080 --accept-hosts='^*$'

## File Copy

;; Copy /tmp/foo_dir local directory to /tmp/bar_dir in a remote pod in the default namespace
kubectl cp /tmp/foo_dir <some-pod>:/tmp/bar_dir

;; Copy /tmp/foo local file to /tmp/bar in a remote pod in a specific container
kubectl cp /tmp/foo <some-pod>:/tmp/bar -c <specific-container>

;; Copy /tmp/foo local file to /tmp/bar in a remote pod in namespace <some-namespace>
kubectl cp /tmp/foo <some-namespace>/<some-pod>:/tmp/bar

;; Copy /tmp/foo from a remote pod to /tmp/bar locally
kubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/bar

Options:
  -c, --container='': Container name. if omitted, the first container in the pod will be chosen

## kubectl drain

kubectl drain NODE [Options]
kubectl cordon NODE
kubectl uncordon NODE

## Authority and Authentication

;; Check to see if I can create pods in any namespace
kubectl auth can-i create pods --all-namespaces

;; Check to see if I can list deployments in my current namespace
kubectl auth can-i list deployments.extensions

;; Check to see if I can do everything in my current namespace ("*" means all)
kubectl auth can-i '*' '*'

;; Check to see if I can get the job named "bar" in namespace "foo"
kubectl auth can-i list jobs.batch/bar -n foo

;; Reconcile rbac resources from a file
kubectl auth reconcile -f my-rbac-rules.yaml

## kubectl Plugin

- ~/.kube/plugins
- subdir/exe-or-scripts + plugin.yaml

$ tree
.
+----hello
     +-------plugin.yaml

1 directory, 1 file

$ cat hello/plugin.yaml
name: "hello"
shortDesc: "Hello kubectl plugin!"
command: "echo Hello plugins!"

$ kubectl plugin hello
Hello plugins!

## Raw URI

kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes
kubectl get --raw /apis/metrics.k8s.io/v1beta1/pods
kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes/<node-name>
kubectl get --raw /apis/metrics.k8s.io/v1beta1/namespace/<namespace-name>/pods/<pod-name>
