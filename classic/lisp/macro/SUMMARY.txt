Summary
=======

1. Calling eval is one way to make Lisp treat lists as code, but it's
   inefficient and unnecessary.

2. You define a macro by saying what a call should expand into. Under-
   neath, macros are just functions that return expressions.

3. A macro body defined with backquote resembles the expansion it will
   produce.

4. The macro designer must be aware of variable capture and multiple
   evaluation. Macros can be tested by pretty-printing their expansions.

5. Multiple evaluation is a problem for most macros that expand into
   setfs.

6. Macros are more flexible than functions, and can be used to define
   a broader range of utilities. You can even use variable caputure to
   advantage.

7. Lisp has survived because it puts its evolution in the hands of the
   programmer. Macros are part of what makes this possible.
