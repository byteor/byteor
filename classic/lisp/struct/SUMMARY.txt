Summary
=======

1. Two lists can share a tail. Lists can share structure as trees without
   sharing top-level list structure. Shared structure can be avoided by
   copying.

2. Shared structure can usually be ignored, but it must be considered if
   you are going to modify lists. Modifying one list can modify other lists
   that share structure with it.

3. Queues can be represented as conses in which the car points to the first
   cons in a list and the cdr to the last.

4. For reasons of efficiency, destructive functions are allowed to modify
   their arguments.

5. In some applications, destructive implementations are the most natural.

6. Lists can be car- or cdr-circular. Lisp can represent circular and shared
   structure.

7. Constants occuring in the text of a program should not be modified.
