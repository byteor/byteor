SUMMARY
=======

1. A named function is a function stored as the symbol-function of a
   symbol. The defun macro hides such details. It also allows you to
   define documentation strings, and specify how setf should treat
   calls.

2. It is possible to define local functions, similar in spirit to local
   variables.

3. Functions can have optional, rest, and keyword parameters.

4. Utilities are additions to Lisp. They are an example of bottom-up
   programming on a small scale.

5. Lexical variables persist as long as something refers to them.
   closures are functions that refer to free variables. You can write
   functions that return closures.

6. Dylan provides functions for building functions. Using closures,
   it's easy to implement them in Common Lisp.

7. Special variable have dynamic scope.

8. Lisp functions can be compiled individually, or (more usually) by
   the file.

9. A recursive algorithm solves a problem by dividing it into a finite
   number of similar, but smaller, problems.
