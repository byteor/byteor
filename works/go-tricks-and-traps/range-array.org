** Code

#+BEGIN_SRC go
package main

import "fmt"

func main() {
	a := [3]int{10, 20, 30}
	for _, e := range a {
		a[0] += 100
		a[1] += 100
		a[2] += 100
		fmt.Printf("%d: %#v\n", e, a)
	}

	s := []int{10, 20, 30}
	for _, e := range s {
		s[0] += 100
		s[1] += 100
		s[2] += 100
		fmt.Printf("%d: %#v\n", e, s)
	}
}
#+END_SRC

** Run

#+BEGIN_SRC shell
go run test.go
10: [3]int{110, 120, 130}
20: [3]int{210, 220, 230}
30: [3]int{310, 320, 330}
10: []int{110, 120, 130}
120: []int{210, 220, 230}
230: []int{310, 320, 330}
#+END_SRC

** Notes

Golang range will copy data (array, slice, channel etc) what is ranged, because
golang array is value type, so the whole array will be copied and iterate will
return the copied data (you just changed the origin data).

If range a function call, ranged function will be called only once.
