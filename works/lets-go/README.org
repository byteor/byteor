#+TITLE: Let's Go: Golang inside and outside
#+AUTHOR: Zhou Peng
#+EMAIL: p@ctriple.cn

* Part 1: Outside

** Introduction

#+BEGIN_SRC go
package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}
#+END_SRC

Following conclusions can be acquired from the example:
- Source code is full UTF-8 encoded
- Golang is static typed, that means you need to compile then run
- Unlike many other static language, go code does not need semicolon to terminate a statement
- Package is the smallest public module
- Public/Private is controlled by Uppercase or Lowercase, like =Println= is public

Let's build and run the example:

#+BEGIN_SRC bash
go run hello.go
Hello, 世界
#+END_SRC

** Language Elements

*** Golang has only 25 keywords

|          |             |        |           |        |
|----------+-------------+--------+-----------+--------|
| break    | default     | func   | interface | select |
| case     | defer       | go     | map       | struct |
| chan     | else        | goto   | package   | switch |
| const    | fallthrough | if     | range     | type   |
| continue | for         | import | return    | var    |

*** And 36 builtin functions or types

|        |         |         |         |        |         |           |            |         |
|--------+---------+---------+---------+--------+---------+-----------+------------+---------|
| append | bool    | byte    | cap     | close  | complex | complex64 | complex128 | uint16  |
| copy   | false   | float32 | float64 | imag   | int     | int8      | int16      | uint32  |
| int32  | int64   | iota    | len     | make   | new     | nil       | panic      | uint64  |
| print  | println | real    | recover | string | true    | uint      | uint8      | uintptr |

*** Difference between keywords and builtins

In one word, =builtins= are just predefined functions or types, which can be
redefined by users for other purpose, but =keywords= can only be used as the
=language spec= explained.

*** Keywords grouped by their mainly used cases

|        |                 |                       |                 |               |
|--------+-----------------+-----------------------+-----------------+---------------|
| Golang | Basic Structure | Variable and Constant | =var=           |               |
|        |                 |                       | =const=         |               |
|        |                 | Pakcage Management    | =package=       |               |
|        |                 |                       | =import=        |               |
|        |                 |                       |                 |               |
|        | Basic Elements  | Function              | =func=          |               |
|        |                 |                       | =return=        |               |
|        |                 | User-Defined Type     | =interface=     |               |
|        |                 |                       | =struct=        |               |
|        |                 | Reference Type        | =map=           |               |
|        |                 |                       | =range=         |               |
|        |                 |                       |                 |               |
|        | Control Flow    | Concurrency           | =go=            |               |
|        |                 |                       | =select=        |               |
|        |                 |                       | =chan=          |               |
|        |                 | Single-Task Control   | Single Branch   | =if=          |
|        |                 |                       |                 | =else=        |
|        |                 |                       | Multiple Branch | =switch=      |
|        |                 |                       |                 | =case=        |
|        |                 |                       |                 | =default=     |
|        |                 |                       |                 | =fallthrough= |
|        |                 |                       | Loop            | =for=         |
|        |                 |                       |                 | =break=       |
|        |                 |                       |                 | =continue=    |
|        |                 |                       | Jump            | =goto=        |
|        |                 |                       |                 |               |
|        | Defered Flow    | =defer=               |                 |               |

** Array and Slice

** Map

** Function

** Struct and Method

** Interface

** Reflect

** Channel and Concurrency

** Tool Chains

* Part 2: Inside

** Memory Alloc & Free

** Garbage Collection

** Goroutine Schedule

** Slice

** String

** Channel

** Map
