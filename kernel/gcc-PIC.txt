To create a shared library, you must compile the objects that will make up the
library using the -fPIC option to the compiler, like this:

  % gcc -c -fPIC test1.c

The -fPIC option tells the compiler that you are going to be using test.o as
part of a shared object.

Position-Independent Code (PIC)

PIC stands for position-independent code. The functions in a shared library may
be loaded at different addresses in different programs, so the code in the
shared object must not depend on the address (or position) at which it is
loaded. This consideration has no impact on you, as the programmer, except that
you must remember to use the -fPIC flag when compiling code that will be used in
a shared library.

Then you combine the object files into a shared library, like this:

  % gcc -shared -fPIC -o libtest.so test1.o test2.o

The -shared option tells the linker to produce a shared library rather than an
ordinary executable. Shared libraries use the extension .so, which stands for
shared object. Like static archives, the name always begins with lib to indicate
that the file is a library. Linking with a shared library is just like linking
with a static archive. For example, the following line will link with libtest.so
if it is in the current directory, or one of the standard library search
directories on the system:

  % gcc -o app app.o -L. -ltest

Suppose that both libtest.a and libtest.so are available.Then the linker must
choose one of the libraries and not the other.The linker searches each directory
(first those specified with -L options, and then those in the standard
directories). When the linker finds a directory that contains either libtest.a
or libtest.so, the linker stops search directories. If only one of the two
variants is present in the directory, the linker chooses that variant.
Otherwise, the linker chooses the shared library version, unless you explicitly
instruct it otherwise.You can use the -static option to demand static archives.
For example, the following line will use the libtest.a archive, even if the
libtest.so shared library is also available:

  % gcc -static -o app app.o -L. -ltest

The ldd command displays the shared libraries that are linked into an
executable. These libraries need to be available when the executable is run.
Note that ldd will list an additional library called ld-linux.so, which is a
part of GNU/Linux's dynamic linking mechanism.
