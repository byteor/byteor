IEEE 754

1. The Sign of Mantissa

This is as simple as the name. 0 represents a positive number while 1
represents a negative number.

2. The Biased exponent

The exponent field needs to represent both positive and negative
exponents. A bias is added to the actual exponent in order to get the
stored exponent.

3. The Normalized Mantissa

The mantissa is part of a number in scientific notation or a
floating-point number, consisting of its significant digits. Here we
have only 2 digits, i.e. 0 and 1. So a normalised mantissa is one with
only one 1 to the left of the decimal.



IEEE 754 numbers are divided into two based on the above three
components: single precision and double precision.

Single Precision

    <--------------------------- 32 bits ---------------------------->
    +------------+------------------+--------------------------------+
    |     Sign   |      Exponent    |               Mantissa         |
    +------------+------------------+--------------------------------+
    <-- 1 Bit --><----- 8 Bits ----><------------- 23 Bits ---------->

Double Precision

    <-------------------------------------------------- 64 Bits -------------------------------------------------->
    +------------+------------------------+-----------------------------------------------------------------------+
    |     Sign   |         Exponent       |                              Mantissa                                 |
    +------------+------------------------+-----------------------------------------------------------------------+
    <-- 1 Bit --><-------- 11 Bits ------><----------------------------- 52 Bits --------------------------------->


+--------------------+------------+-----------------+-----------------------+------+
|      TYPES         |   SIGN     | BIASED EXPONENT |   NORMALISED MANTISA  | BIAS |
+--------------------+------------+-----------------+-----------------------+------+
|  Single precision  |  1 (31st)  |  8 (30-23)      |  23 (22-0)            | 127  |
+--------------------+------------+-----------------+-----------------------+------+
|  Double precision  |  1 (63rd)  |  11 (62-52)     |  52 (51-0)            | 1023 |
+--------------------+------------+-----------------+-----------------------+------+



Bit Pattern     Meaning of Exponent Field
-----------     -------------------------
 0000 0000      Denormalized Numbers, including zero
 0000 0001      -126
   ...          ...
 0111 1110      -1
 0111 1111      0
 1000 0000      +1
   ...          ...
 1111 1110      +127
 1111 1111      Infinity, Not-a-Number (NaN)

For normalized numbers, the exponent has an effective range of
-126..+127.

The smallest positive normalized number is:

  In binary: 1.00000000000000000000000x2^-126 (There are 23 zeros)
  In bits:   0x00800000 = 0 00000001 00000000000000000000000
  Decimal approximation: 1.17549435x10^-38

The largest normalized number is:

  In binary: 1.11111111111111111111111x2^+127 (There are 23 ones)
  In bits:   0x7F7FFFFF = 0 11111110 11111111111111111111111
  Decimal approximation: 3.4028235x10^38

If the exponent is all ones (i.e., 11111111), the the value of the
fraction matters. If the fraction is all zeros, then the value is +Inf
or -Inf depending on the sign bit.

  +Inf: 0x7F800000 = 0 11111111 00000000000000000000000
  -Inf: 0xFF800000 = 1 11111111 00000000000000000000000

If the exponent is all ones (i.e., 11111111), and the value of the
fraction is not all zeros, the NaN is represented. There are multiple
representions that are to be interpreted as NaN values. The canonical,
preferred representation of NaN is often this:

  NaN (typical): 0xFFFFFFFF = 1 11111111 11111111111111111111111

If the exponent field is all zeros (i.e., 00000000), the the vaule is
a denormalized number. The value of the number is:

  N = (-1)^sign x 0.fraction x 2^-126

Notice that the leading implicit "1" bit is no longer assumed; it is
now "0". Also the exponent is always -126, which happens to be the
smallest exponent for normalized numbers.

Here are some sample numbers that may help explain denormalized
numbers:

Smallest normalized number  : 1.00000000000000000000000 x 2^-126 (24 bits of precision)
Largest denormalized number : 0.11111111111111111111111 x 2^-126 (23 bits of precision)
Random denormalized number  : 0.00000000001100101110101 x 2^-126 (13 bits of precision)
Smallest denormalized number: 0.00000000000000000000001 x 2^-126 (1 bit of precision)
+0.0                        : 0.00000000000000000000000 x 2^-126 (0 bit of precision)



Example

==> 85.125

  sign   = 0
  85     = 1010101
  0.125  = 001
  85.125 = 1010101.001
	 = 1.010101001 * 2^6

1. Single precision:

biased exponent 127+6=133
133 = 10000101
Normalised mantisa = 010101001
we will add 0's to complete the 23 bits

The IEEE 754 Single precision is:
= 0 10000101 01010100100000000000000
This can be written in hexadecimal form 42AA4000

2. Double precision:

biased exponent 1023+6=1029
1029 = 10000000101
Normalised mantisa = 010101001
we will add 0's to complete the 52 bits

The IEEE 754 Double precision is:
= 0 10000000101 0101010010000000000000000000000000000000000000000000
This can be written in hexadecimal form 4055480000000000



Special Values: IEEE has reserved some values that can ambiguity.

Zero – Zero is a special value denoted with an exponent and mantissa
of 0. -0 and +0 are distinct values, though they both are equal.

Denormalised – If the exponent is all zeros, but the mantissa is not
then the value is a denormalized number. This means this number does
not have an assumed leading one before the binary point.

Infinity – The values +infinity and -infinity are denoted with an
exponent of all ones and a mantissa of all zeros. The sign bit
distinguishes between negative infinity and positive
infinity. Operations with infinite values are well defined in IEEE.

Not A Number (NAN) – The value NAN is used to represent a value that
is an error. This is represented when exponent field is all ones with
a zero sign bit or a mantissa that it not 1 followed by zeros. This is
a special value that might be used to denote a variable that doesn’t
yet hold a value.

+----------+---------+--------------------+
| EXPONENT | MANTISA |        VALUE       |
+----------+---------+--------------------+
|  0       |  0      | exact 0            |
+----------+---------+--------------------+
|  255     |  0      | Infinity           |
+----------+---------+--------------------+
|  0       |  not 0  | denormalised       |
+----------+---------+--------------------+
|  255     |  not 0  | Not a number (NaN) |
+----------+---------+--------------------+
