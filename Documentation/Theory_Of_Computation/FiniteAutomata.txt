FINITE AUTOMATA
---------------

A finite automaton is a 5-tuple (Q,Σ,δ,q0,F), where

1. Q is a finite set of states,
2. Σ is a finite alphabet,
3. δ: Q × Σ −→ Q is the transition function,
4. q0 ∈ Q is the start state, and
5. F ⊆ Q is the set of accept states.

Let M = (Q,Σ,δ,q0,F) be a finite automaton and let w = w1w2···wn be a
string where each wi is a member of the alphabet Σ. Then M accepts w
if a sequence of states r0,r1,...,rn in Q exists with three
conditions:

1. r0 = q0,
2. δ(ri, wi+1) = ri+1, for i=0, ..., n−1, and
3. rn ∈ F.

A language is called a regular language if some finite automaton
recognizes it.


REGULAR OPERATIONS
------------------

Let A and B be languages. We define the regular operations union,
concatenation, and star as follows:

• Union: A ∪ B = {x| x ∈ A or x ∈ B}.
• Concatenation: A ◦ B = {xy| x ∈ A and y ∈ B}.
• Star: A∗ = {x1x2...xk| k ≥ 0 and each xi ∈ A}.


NONDETERMINISTIC FINITE AUTOMATON
---------------------------------

In an NFA, the transition function takes a state and an input symbol
or the empty string and produces the set of possible next states. In
order to write the formal definition, we need to set up some
additional notation. For any set Q we write P(Q) to be the collection
of all subsets of Q. Here P(Q) is called the power set of Q. For any
alphabet Σ we write Σε to be Σ ∪ {ε}. Now we can write the formal
description of the type of the transition function in an NFA as
δ: Q × Σε −→ P(Q).

A nondeterministic finite automaton is a 5-tuple (Q,Σ,δ,q0,F), where

1. Q is a finite set of states,
2. Σ is a finite alphabet,
3. δ: Q × Σε −→ P(Q) is the transition function,
4. q0 ∈ Q is the start state, and
5. F ⊆ Q is the set of accept states.

Let N = (Q,Σ,δ,q0,F) be an NFA and w a string over the alphabet
Σ. Then we say that N accepts w if we can write w as w = y1y2···ym,
where each yi is a member of Σε and a sequence of states r0,r1,...,rm
exists in Q with three conditions:

1. r0 = q0,
2. ri+1 ∈ δ(ri,yi+1), for i=0, ..., m−1, and
3. rm ∈ F.
