#+TITLE: Software Architecture Patterns
#+AUTHOR: Mark Richards
#+AUTHOR: Zhou Peng
#+EMAIL: lockrecv@qq.com

Understanding Common Architecture Patterns and When to Use Them

* Layered Architecture

** Overall agility

Rating: Low

Analysis: Overall agility is the ability to respond quickly to a constantly
changing environment. While change can be isolated through the layers of
isolation feature of this pattern, it is still cumbersome and time-consuming to
make changes in this architecture pattern because of the monolithic nature of
most implementations as well as the tight coupling of components usually found
with this pattern.

** Ease of deployment

Rating: Low

Analysis: Depending on how you implement this pattern, deployment can become an
issue, particularly for larger applications. One small change to a component can
require a redeployment of the entire application (or a large portion of the
application), resulting in deployments that need to be planned, scheduled, and
executed during off-hours or on weekends. As such, this pattern does not easily
lend itself toward a continuous delivery pipeline, further reducing the overall
rating for deployment.

** Testability

Rating: High

Analysis: Because components belong to specific layers in the architecture,
other layers can be mocked or stubbed, making this pattern is relatively easy to
test. A developer can mock a presentation component or screen to isolate testing
withing a business component, as well as mock the business layer to test certain
screen functionality.

** Performance

Rating: Low

Analysis: While it is true some layered architecture can perform well, the
pattern does not lend itself to high-performance application due to the
inefficiencies of having to go through multiple layers of the architecture to
fulfill a business request.

** Scalability

Rating: Low

Analysis: Because of the trend toward tightly coupled and monolithic
implementations of this pattern, applications build using this architecture
pattern are generally difficult to scale. You can scale a layered architecture
by splitting the layers into separate physical deployments or replicating the
entire application into multiple nodes, but overall the granularity is too
broad, making it expensive to scale.

** Ease of development

Rating: High

Analysis: Ease of development gets a relatively high score, mostly because this
pattern is so well known and is not overly complex to implement. Because most
companies develop applications by separating skill sets by layers (presentation,
business, database), this pattern becomes a natural choice for most
business-application development. The connection between a company's
communication and organization structure and the way it develops software is
outlined is what is called =Conway's law=.

* Event-Driven Architecture

- Mediator Topology

The mediator topology is useful for events that have multiple steps and require
some level of orchestration to process the event.

- Broker Topology

The broker topology differs from the mediator topology in that there is no
central event mediator; rather, the message flow is distributed across the event
processor components in a chain-like fashion through a lightweight message
broker.

** Overall agility

Rating: High

Analysis: Overall agility is the ability to respond quickly to a constantly
changing environment. Since event-processor components are single-purpose and
completely decoupled from other event processor components, changes are
generally isolated to one or few event processors and can be made quickly
without impacting other components.

** Ease of deployment

Rating: High

Analysis: Overall this pattern is relatively easy to deploy due to the decoupled
nature of the event-processor components. The broker topology tends to be easier
to deploy than the mediator topology, primarily because the event mediator
component is somewhat tightly coupled to the event processors: a change in an
event processor component might also require a change in the event mediator,
requiring both to be deployed for any given change.

** Testability

Rating: Low

Analysis: While individual unit testing is not overly difficult, it does require
some sort of specialized testing client or testing tool to generate events.
Testing is also complicated by the asynchronous nature of this pattern.

** Performance

Rating: High

Analysis: While it is certainly possible to implement an event-driven
architecture that does not perform well due to all the messaging infrastructure
involved, in general, the pattern achieves high performance through its
asynchronous capabilities; in other words, the ability to perform decoupled,
parallel asynchronous operations outweighs the cost of queuing and dequeuing
messages.

** Scalability

Rating: High

Analysis: Scalability is naturally achieved in this pattern through highly
independent and decoupled event processors. Each event processor can be scaled
separately, allowing for fine-grained scalability.

** Ease of development

Rating: Low

Analysis: Development can be somewhat complicated due to the asynchronous nature
of the pattern as well as contract creation and the need for more advanced error
handling conditions within the code for unresponsive event processors and failed
brokers.

* Microkernel Architecture

The microkernel architecture pattern consists of two types of architecture
components: a core system and plug-in modules.

** Overall agility

Rating: High

Analysis: Overall agility is the ability to respond quickly to a constantly
changing environment. Changes can largely be isolated and implemented quickly
through loosely coupled plug-in modules. In general, the core system of most
microkernel architectures tends to become stable quickly, and as such is fairly
robust and requires few changes over time.

** Ease of deployment

Rating: High

Analysis: Depending on how the pattern is implemented, the plug-in modules can
be dynamically added to the core system at runtime (e.g., hot-deployed),
minimizing downtime during deployment.

** Testability

Rating: High

Analysis: Plug-in modules can be tested in isolation and can be easily mocked by
the core system to demonstrate or prototype a particular feature with little or
no change to the core system.

** Performance

Rating: High

Analysis: While the microkernel pattern does not naturally lend itself to
high-performance application, in general, most applications built using the
microkernel architecture pattern perform well because you can customize and
streamline applications to only include those features you need. The =JBoss=
application Server is a good example of this: with its plug-in architecture, you
can trim down the application server to only those features you need, removing
expensive non-used features such as remote access, messaging, and caching that
consume memory, CPU, and threads and slow down the app server.

** Scalability

Rating: Low

Analysis: Because most microkernel architecture implementations are product
based and are generally smaller in size, they are implemented as single units
and hence not highly scalable. Depending on how you implement the plug-in
feature level, but overall this pattern is not known for producing highly
scalable application.

** Ease of development

Rating: Low

Analysis: The microkernel architecture requires thoughtful design and contract
governance, making it rather complex to implement. Contract versioning, internal
plug-in registries, plug-in granularity, and the wide choice available for
plug-in connectivity all contribute to the complexity involved with implementing
this pattern.

* Microservices Architecture Pattern

Separately deployed units.

** Overall agility

Rating: High

Analysis: Overall agility is the ability to respond quickly to a constantly
changing environment. Due to the notion of separately deployed units, change is
generally isolated to individual service components, which allows for fast and
easy deployment. Also, applications build using this pattern tend to be very
loosely coupled, which also helps facilitate change.

** Ease of deployment

Rating: High

Analysis: Overall this pattern is relatively easy to deploy due to the decoupled
nature of the event-processor components. The broker topology tends to be easier
to deploy than the mediator topology, primarily because the event-mediator
component is somewhat tightly coupled to the event processors: a change in an
event processor component might also require a change in the event mediator,
requiring both to be deployed for any given change.

** Testability

Rating: High

Analysis: Due to the separation and isolation of business functionality into
independent applications, testing can be scoped, allowing for more targeted
testing efforts. Regression testing for a particular service component is much
easier and more feasible than regression testing for an entire monolithic
application. Also, since the service components in this pattern are loosely
coupled, there is much less of a chance from a development perspective of making
a change that breaks another part of the application, easing the testing burden
of having to test the entire application for one small change.

** Performance

Rating: Low

Analysis: While you can create applications implemented from this pattern that
perform very well, overall this pattern does not naturally lend itself to
high-performance applications due to the distributed nature of the microservices
architecture pattern.

** Scalability

Rating: High

Analysis: Because the application is split into separately deployed units, each
service component can be individually scaled, allowing for fine-tuned scaling of
the application. For example, the admin area of a stock-trading application may
not need to scale due to the low user volumes for that functionality, but the
trade-placement service component may need to scale due to the distributed
nature of the microservices architecture pattern.

** Scalability

Rating: High

Analysis: Because the application is split into separately deployed units, each
service component can be individually scaled, allowing for fine-tuned scaling of
the application. For example, the admin area of a stock-trading application may
not need to scale due to the low user volumes for that functionality, but the
trade-placement service component may need to scale due to the high throughput
needed by most trading applications for this functionality.

** Ease of development

Rating: High

Analysis: Because functionality is isolated into separate and distinct service
components, development becomes easier due to the smaller and isolated scope.
There is much less chance a developer will make a change in one service
component that would affect other service components, thereby reducing the
coordination needed among developers or development teams.

* Space-Based Architecture

** Overall agility

Rating: High

Analysis: Overall agility is the ability to respond quickly to a constantly
changing environment. Because processing units (deployed instances of the
application) can be brought up and down quickly, applications respond well to
changes related to an increase or decrease in user load (environment changes).
Architectures created using this pattern generally respond well to coding
changes due to the small application size and dynamic nature of the pattern.

** Ease of deployment

Rating: High

Analysis: Although space-based architectures are generally not decoupled and
distributed, they are dynamic, and sophisticated cloud-based tools allow for
applications to easily be "pushed" out to servers, simplifying deployment.

** Testability

Rating: Low

Analysis: Achieving very high user loads in a test environment is both expensive
and time consuming, making it difficult to test the scalability aspects of the
application.

** Performance

Rating: High

Analysis: High performance is achieved through the in-memory data access and
caching mechanisms build into this pattern.

** Scalability

Rating: High

Analysis: High scalability come from the fact that there is little or no
dependency on a centralized database, therefore essentially removing this
limiting bottleneck from the scalability equation.

** Ease of development

Rating: Low

Analysis: Sophisticated caching and in-memory data grid products make this
pattern relatively complex to develop, mostly because of the lack of familiarity
with the tools and products used to create this type of architecture.
Furthermore, special care must be taken while developing these types of
architectures to make sure nothing in the source code impacts performance and
scalability.

* Patterns Summary

|                 | Layered | Event-driven | Microkernel | Microservices | Space-based |
|-----------------+---------+--------------+-------------+---------------+-------------|
| Overall Agility | NO      | YES          | YES         | YES           | YES         |
| Deployment      | NO      | YES          | YES         | YES           | YES         |
| Testability     | YES     | NO           | YES         | YES           | NO          |
| Performance     | NO      | YES          | YES         | NO            | YES         |
| Scalability     | NO      | YES          | NO          | YES           | YES         |
| Development     | YES     | NO           | NO          | YES           | NO          |
