# Privileged Architecture

More-privileged modes generally have access to all of the features of
less-privileged modes, and they add additional functionality not
available to less-privileged modes, such as the ability to handle
interrupts and perform I/O. Processors typically spend most of their
execution time in their least-privileged mode; interrupts and
exceptions transfer control to more-privileged modes.

        mret: machine-mode trap return
              ^                 ^^^
        sret: supervisor-mode trap return
              ^                    ^^^
  sfence.vma: supervisor-mode fence.virtual memory address
              ^               ^^^^^^^       ^      ^
         wfi: wait for interrupt
              ^    ^   ^
## Machine Mode

Five kind of synchronous exceptions can happen during M-mode execution:

1. Access fault exceptions arise when a physical memory address
   doesn't support the access type - for example, attempting to store
   to a ROM.

2. Breakpoint exceptions arise from executing an ebreak instruciton,
   or when an address or datum matches a debug trigger.

3. Environment call exceptions arise from executing an ecall
   instruction.

4. Illegal instruction exceptions result from decoding an invalid opcode.

5. Misaligned address exceptions occur when the effective address
   isn't divisible by the access size - for example, amoadd.w with an
   address of 0x12.

RISC-V exception and interrupt causes. The most-significant bit of
mcause is set to 1 for interrupts or 0 for synchronous exceptions, and
the least-significant bits identify the interrupt or
exception. Supervisor interrupts and page-fault exceptions are only
possible when supervisor mode is implemented (XLEN is 32 for RV32 or
64 for RV64).

- mcause

┌───────────────────┬──────────────────┬────────────────────────────────┐
│Interrupt/Exception│  Exception Code  │           Description          │
│  mcause[XLEN-1]   │ mcause[XLEN-2:0] │                                │
├───────────────────┼──────────────────┼────────────────────────────────┤
│                1  │                1 │ Supervisor software interrupt  │
│                1  │                3 │ Machine software interrupt     │
│                1  │                5 │ Supervisor timer interrupt     │
│                1  │                7 │ Machine timer interrupt        │
│                1  │                9 │ Supervisor external interrupt  │
│                1  │               11 │ Machine external interrupt     │
├───────────────────┼──────────────────┼────────────────────────────────┤
│                0  │                0 │ Instruction address misaligned │
│                0  │                1 │ Instruction access fault       │
│                0  │                2 │ Illegal instruction            │
│                0  │                3 │ Breakpoint                     │
│                0  │                4 │ Load address misaligned        │
│                0  │                5 │ Load access fault              │
│                0  │                6 │ Store address misaligned       │
│                0  │                7 │ Store access fault             │
│                0  │                8 │ Environment call from U-mode   │
│                0  │                9 │ Environment call from S-mode   │
│                0  │               11 │ Environment call from M-mode   │
│                0  │               12 │ Instruction page fault         │
│                0  │               13 │ Load page fault                │
│                0  │               15 │ Store page fault               │
└───────────────────┴──────────────────┴────────────────────────────────┘

- mstatus

XLEN-1 XLEN-2         23 22 21  20 19   18  17 16,15 14,13 12,11   8    7  6  5     4   3  2  1   0
  ┌──┬─────────────────┬───┬──┬───┬───┬───┬────┬────┬────┬─────┬─┬───┬────┬─┬────┬────┬───┬─┬───┬───┐
  │SD│       0         │TSR│TW│TVM│MXR│SUM│MPRV│ XS │ FS │ MPP │0│SPP│MPIE│0│SPIE│UPIE│MIE│0│SIE│UIE│
  └──┴─────────────────┴───┴──┴───┴───┴───┴────┴────┴────┴─────┴─┴───┴────┴─┴────┴────┴───┴─┴───┴───┘
    1     XLEN-24        1   1  1   1   1   1     2    2    2   2  1    1  1   1    1   1  1  1   1

Eight control and status register (CSRs) are integral to machine-mode
exception handling:

* mtvec, Machine Trap Vector, holds the address the processor jumps to
         when an exception occurs.

* mepc, Machine Exception PC, points to the instruction where the
        exception occurred.

* mcause, Machine Exception Cause, indicates which exception occurred.

* mie, Machine Interrupt Enable, lists which interrupts the processor
       can take and which it must ignore.

* mip, Machine Interrupt Pending, lists the interrupts currently
       pending.

* mtval, Machine Trap Value, holds additional trap information; the
         faulting address for address exceptions, the instruction
         itself for illegal instruction exceptions; and zero for other
         exceptions.

* mscratch, Machine Scratch, holds one world of data for temporary
            storage.

* mstatus, Machine Status, holds the global interrupt enable, along
           with a plethora of other state.

When a hart takes an exception, the hardware atomically undergoes
several state transitions:

1. The PC of the exceptional instruction is preserved in mepc, and the
   PC is set to mtvec. (For synchronous exceptions, mepc points to the
   instruction that caused the exception; for interrupts, it points
   where execution should resume after the interrupt is handled.)

2. mcause is set to the exception cause, and mtval is set to the
   faulting address or some other exception-specific word of
   information.

3. Interrupts are disabled by setting MIE=0 in the mstatus CSR, and
   the previous value of MIE is preserved in MPIE.

4. The pre-exception privilege mode is preserved in mstatus' MPP
   field, and the privilege mode is changed to M. (If the processor
   only implements M-mode, this step is effectively skipped.)

To avoid overwriting the contents of the integer registers, the
prologue of an interrupt handler usually begins by swapping an integer
register (say, a0) with the mscratch CSR.  Usually, the software will
have arranged for mscratch to contain a pointer to additional
in-memory scratch space, which the handler uses to save as many
integer registers as its body will use. After the body executes, the
epilogue of an interrupt handler restores the registers it saved to
memory, then again swaps a0 with mscratch, restoring both registers to
their pre-exception values. Finally, the handler returns with mret, an
instruction unique to M-mode. mret sets the PC to mepc, restores the
previous interrupt-enable setting by copying the mstatus MPIE field to
MIE, and sets the privilege mode to the value in mstatus’ MPP field,
essentially reversing the actions described in the preceding
paragraph.

- Physical Memory Protection (PMP)

 XLEN-1
  ┌─────────────────────────────────────────────────────┐
  │             address[PhysicalAddressSize-1:2]        │
  └─────────────────────────────────────────────────────┘

   7 6 5 4 3 2 1 0
  ┌─┬───┬───┬─┬─┬─┐   R: read
  │L│ 0 │ A │X│W│R│   W: write
  └─┴───┴───┴─┴─┴─┘   X: execute
                      A: PMP mode
                      L: locks PMP and registers

## Supervisor Mode

- sstatus

 XLEN-1 XLEN-2                    20  19    18  17 16 15   14 13  12  9  8  7 6   5   4   3 2  1   0
  ┌────┬───────────────────────────┬─────┬─────┬─┬───────┬───────┬─────┬───┬───┬────┬────┬───┬───┬───┐
  │ SD │             0             │ MXR │ SUM │0│XS[1:0]│FS[1:0]│  0  │SPP│ 0 |SPIE|UPIE| 0 |SIE|UIE|
  └────┴───────────────────────────┴─────┴─────┴─┴───────┴───────┴─────┴───┴───┴────┴────┴───┴───┴───┘
    1            XLEN-21              1     1   1    2       2      4    1   2    1   1    2   1   1

If a hart takes an exception and it is delegated to S-mode, the
hardware atomically undergoes several similar state transitions, using
S-mode CSRs instead of M-mode ones:

1. The PC of the exceptional instruction is preserved in sepc, and the
   PC is set to stvec.

2. scause is set to the exception cause, and stval is set to the
   faulting address or some other exception-specific word of
   information.

3. Interrupts are disabled by setting SIE=0 in the sstatus CSR, and
   the previous value of SIE is preserved in SPIE.

4. The pre-exceptino privilege mode is preserved in sstatus' SPP
   field, and the privilege mode is changed to S.

- RV32 Sv32 page-table entry (PTE)

  31         20 19         10 9   8 7 6 5 4 3 2 1 0
  ┌────────────┬─────────────┬─────┬─┬─┬─┬─┬─┬─┬─┬─┐
  │   PPN[1]   │    PPN[0]   │ RSW │D│A│G│U│X│W│R|V|
  └────────────┴─────────────┴─────┴─┴─┴─┴─┴─┴─┴─┴─┘
       12            10         2   1 1 1 1 1 1 1 1

- RV64 Sv39 page-table entry (PTE)

  63         54 53              28 27         19 18       10 9 8 7 6 5 4 3 2 1 0
  ┌────────────┬──────────────────┬─────────────┬───────────┬───┬─┬─┬─┬─┬─┬─┬─┬─┐
  │  Reserved  │     PPN[2]       │    PPN[1]   │   PPN[0]  │RSW│D│A│G│U│X|W|R|V|
  └────────────┴──────────────────┴─────────────┴───────────┴───┴─┴─┴─┴─┴─┴─┴─┴─┘
       10              26               9             9       2  1 1 1 1 1 1 1 1

1. The V bit indicates whether the rest of this PTE is valid (V=1). If
   V=0, any virtual address translation that traverses this PTE
   results in a page fault.

2. The R, W, and X bits indicate the page has read, write, and execute
   permissions, respectively. If all three bits are 0, this PTE is a
   pointer to the next level of the page table; otherwise, it's a leaf
   of the tree.

3. The U bit indicates whether this page is a user page, if U=0,
   U-mode cannot access this page, but S-mode can. If U=1, U-mode can
   access this page, but S-mode cannot.

4. The G bit indicates this mapping exists in all virtual-address
   spaces, information the hardware can use to improve
   address-translation performance. It is typically only used for
   pages that belong to the operating system.

5. The A bit indicates whether the pages has been accessed since the
   last time the A bit was cleared.

6. The D bit indicates whether the page has been dirtied (i.e.,
   written) since the last time the D bit was cleared.

7. The RSW field is reserved for the operating system's use; the
   hardware ignores it.

8. The PPN field holds a physical page number, which is part of a
   physical address. If this PTE is a leaf, the PPN is part of the
   translated physical address. Otherwise, the PPN gives the address
   of the next level of the page table.

- satp: Supervisor Address Translation and Protection

   31  30        22 21                   0
  ┌────┬───────────┬─────────────────────┐
  │MODE│    ASID   │          PPN        | RV32
  └────┴───────────┴─────────────────────┘       MODE:
     1       9                22                     0 Bare No translation or protection
                                                     1 Sv32 Page-based 32-bit virtual addressing

  63 60 59              44 43                                           0
  ┌────┬──────────────────┬─────────────────────────────────────────────┐
  │MODE│       ASID       │                        PPN                  │ RV64
  └────┴──────────────────┴─────────────────────────────────────────────┘        MODE:
    4          16                                  44                                0 Bare No translation or protection
                                                                                     8 Sv39 Page-based 39-bit virtual addressing
                                                                                     9 Sv48 Page-based 48-bit virtual addressing

The complete algorithm for virtual-to-physical address translation. va
is the virtual address input and pa is the physical address
output. The PAGESIZE constant is 2^12. For Sv32, LEVELS=2 and
PTESIZE=4, whereas for Sv39, LEVELS=3 and PTESIZE=8.

1. Let a be satp.ppn * PAGESIZE, and let i = LEVELS-1.

2. Let pte be the value of the PTE at address a + va.vpn[i] * PTESIZE.

3. If pte.v = 0, or if pte.r = 0 and pte.w = 1, stop and raise a
   page-fault exception.

4. Otherwise, the PTE is valid. If pte.r = 1 or pte.x = 1, go to step
   (5). Otherwise, this PTE is a pointer to the next level of the page
   table. Let i = i-1. If i < 0, stop and raise a page-fault
   exception. Otherwise, let a = pte.ppn * PAGESIZE and go to step
   (2).

5. A leaf PTE has been found. Determine if the requested memory access
   is allowed by the pte.r, pte.w, pte.x, and pte.u bits, given the
   current privilege mode and the value of the SUM and MXR fields of
   the mstatus register. If not, stop and raise a page-fault
   exception.

6. If i > 0, and pa.ppn[i-1:0] != 0, this is a misaligned superpage;
   stop and raise a page-fault exception.

7. If pte.a = 0, or if the memory access is a store and pte.d = 0,
   then either:

     * Raise a page-fault exception, or:
     * Set pte.a to 1 and, if the memory access is a store, also set pte.d to 1.

8. The translation is successful. The translated physical address is
   given as follows:

     * pa.pgoff = va.pgoff
     * If i > 0, then this is a superpage translation and pa.ppn[i-1:0]=va.vpn[i-1:0].
     * pa.ppn[LEVELS-1:i] = pte.ppn[LEVELS-1:i].
