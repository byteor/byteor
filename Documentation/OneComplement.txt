# One's Complement

Computer is more good at add operation than minus. So the actual minus
operation is transformed to a add operation to be carried out. But how
that could happen?

Let's say our computer word length is 4 bits, so all the numbers it
could represent are:

  0000 0001 0010 0011 0100 0101 0110 0111
  1000 1001 1010 1011 1100 1101 1110 1111

The magic is that we divide the above numbers into two ranges, The
first row we assign them positive numbers, and the second row we
assign them negative numbers (the decimal numbers are above or
underneath their binary numbers).

  0    1    2    3    4    5    6    7
  0000 0001 0010 0011 0100 0101 0110 0111 Positive numbers [0,7]
  1000 1001 1010 1011 1100 1101 1110 1111 Negative numbers [-7,-1], -0
  -0   -7   -6   -5   -4   -3   -2   -1

Let's do some quick math verification:

1 + (-1)    = 0001
            + 1111
            ^^^^^^
             10000 => 0000 = 0
             ^discard overflow bit

3 + (-2)    = 0011
            + 1110
            ^^^^^^
             10001 => 0001 = 1
             ^discard overflow bit

7 + (-5)    = 0111
            + 1011
            ^^^^^^
             10010 => 0010 = 2
             ^discard overflow bit

4 + 2       = 0100
            + 0010
            ^^^^^^
              0110 => 0110 = 6

(-4) + (-2) = 1100
            + 1110
            ^^^^^^
             11010 => 1010 = -6
             ^discard overflow bit

Note that if the add/minus results are out of [-7, 7], such as 5+5 or
-5+(-5), our 4 bits computer could not work correctly. But we could
extend the bits to accommandate that situation.

The basic idea underneath is that (a) negative and positive numbers
are assigned to the computer bits width number points wisely. (b)
minus could be transformed to add operation mathmatically equaltion
`5-2 = 5+(-2).`

One's complement, or nature number complements is that:

(a) if number is positive, the complement number is itself exactly.
(b) otherwise if negative, the compelemnt number is the positive
    number negate all the bits and add bit 1.

Let's do some complement numbers calculation:

3  => 0011 ===> 0011

           neg       +1
-3 => 0011 ===> 1100 ==> 1101

7  => 0111 ===> 0111

           neg       +1
-7 => 0111 ===> 1000 ==> 1001
