fork generates an identical copy of the current process; this copy is known
^^^^ as a child process. All resources of the original process are copied
     in a suitable way so that after the system call there are two independent
     instances of the original process. These instances are not linked in
     any way but have, for example, the same set of open files, the same
     working directory, the same data in memory (each with its own copy of
     the data), and so on.

exec repalces a running process with another application loaded from an
^^^^ executable binary file. In other words, a new program is loaded. Because
     exec does not create a new process, an old program must first be
     duplicated using fork, and then exec must be called to generate an
     additional application on the system.
