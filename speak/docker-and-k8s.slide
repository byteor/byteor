Container: Docker and Kubernates
成都
2 Jan 2017

周朋
zhoupeng@retail-tek.com
https://github.com/lockrecv
微信 lockrecv

* License

Copyright © Zhou Peng <lockrecv@outlook.com>

* 日程

- 没有容器的时代
- 小结
- Docker
  * 基本原理
  * Build Ship Run
  * Kubernetes (K8S)
- 容器以后是什么

* 1970~1980 巨型机

关键词: 军队 国家
.image img/mainframe.jpg

* 1990~2000 工作站 & PC

关键词: 银行 国企 个人
.image img/workstation.jpg 250 _
.image img/desktops.png 200 _

* 2000~2017 手持终端 & Cloud

关键词: Cloud, Anyone, Anytime, Anywhere
.image img/iphone.jpg 250 _
.image img/google-chromebook.jpg 250 _

* 小结

: Prensenter notes
你能感知的

- 你能接入的计算能力越来越多
- 享受的计算越来越便宜

: Prensenter notes
背后的技术变革

- CPU,内存,硬盘等摩尔定律
- 虚拟化,容器化,云

* 物理机

  代码
  数据
  Runtime(JRE,Python)
  中间件(glibc)
  操作系统
  ----------------------------> 分割线
  CPU
  存储
  网络

应用部署周期: 周/天

* 虚拟机

.image img/vm.png 350 _

- 将一台物理机虚拟成多台,每台虚拟机是一个操作系统的完整拷贝
- 大小GBs级别,应用部署时间小时/分钟级

* 容器

.image img/container.png 350 _

- 应用程序代码和所有的依赖打包(Docker Image)
- 多个容器共享Linux内核,彼此之间完全隔离(网络,磁盘,CPU等)
- 大小MBs级别,应用部署时间秒/毫秒级

* Docker: 基本原理

资源 _隔离_ & _共享_

NET
.link c/net.c
FS
.link c/unionfs.txt
IPC
.link c/ipc.c
PID
.link c/pid.c
UTS
.link c/uts.c

* Docker: Build Ship Run

.image img/build-ship-run.svg 300 _

  $ docker run hello-world
  Unable to find image 'hello-world:latest' locally
  latest: Pulling from library/hello-world
  78445dd45222: Pull complete
  Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
  Status: Downloaded newer image for hello-world:latest

  Hello from Docker!
  This message shows that your installation appears to be working correctly.
  ... ...

* Docker: Build

.image img/docker-filesystems-multilayer.png

* Docker: Dockerfile

.code elasticsearch/Dockerfile
.link https://github.com/docker-library/official-images

* Docker: Ship & Run

  $ docker push registry.docker.com/lockrecv/elasticsearch:lastest  (git push)
  # 本机或另一台Docker机器
  $ docker pull docker.elastic.co/elasticsearch/elasticsearch       (git pull)
  $ docker run elasticsearch

* Docker: CI/CD "integration matrix"

  Hardware  What: Dev,QA,Prod
             How: APP能在差异化的硬件环境下平滑快速的部署发布吗?

  Software  What: Web,DB,Daemon
             How: 服务和APP之间交互正常吗?

.image img/integration-matrix.png _ 1000

* Kubernates vs Docker

.image img/boeing-engine.jpg 300 400
.image img/boeing-flight-deck.jpg 300 700

* Kubernates

主要功能

- 使用Docker对应用程序包装(package)、实例化(instantiate)、运行(run)
- 以集群的方式运行、管理跨机器的容器
- 解决Docker跨机器容器之间的通讯问题
- Kubernates的自我修复机制使得容器集群总是运行在用户期望的状态

* Kubernates Architecutre

.image img/kubernetes-cluster.png

* Kubernates

Pods

  Pod是Kubernetes的基本操作单元，把相关的一个或多个容器构成一个Pod，通常Pod里的
  容器运行相同的应用。Pod包含的容器运行在同一个Minion(Host)上，看作一个统一管理
  单元，共享相同的volumes和network namespace/IP和Port空间。

* Kubernates cont.

Services

  Services也是Kubernetes的基本操作单元，是真实应用服务的抽象，每一个服务后面都有很
  多对应的容器来支持，通过Proxy的port和服务selector决定服务请求传递给后端提供服务
  的容器，对外表现为一个单一访问接口，外部不需要了解后端如何运行，这给扩展或维护后
  端带来很大的好处。

* Kubernates cont.

Replication Controllers

  Replication Controller确保任何时候Kubernetes集群中有指定数量的pod副本(replicas)
  在运行， 如果少于指定数量的pod副本(replicas)，Replication Controller会启动新的
  Container，反之会杀死多余的以保证数量不变。Replication Controller使用预先定义的
  pod模板创建pods，一旦创建成功，pod 模板和创建的pods没有任何关联，可以修改pod 模
  板而不会对已创建pods有任何影响，也可以直接更新通过Replication Controller创建的
  pods。对于利用pod 模板创建的pods，Replication Controller根据label selector来关联，
  通过修改pods的label可以删除对应的pods。

* Kubernates cont.

Replication Controller主要有如下用法：

- Rescheduling

  Replication Controller会确保Kubernetes集群中指定的pod副本(replicas)在运行， 即
  使在节点出错时。

- Scaling

  通过修改Replication Controller的副本(replicas)数量来水平扩展或者缩小运行的pods。

- Rolling updates

  Replication Controller的设计原则使得可以一个一个地替换pods来rolling updates服务。

- Multiple release tracks

  如果需要在系统中运行multiple release的服务，Replication Controller使用labels来
  区分multiple release tracks。

* Kubernates cont.

Labels

  Labels是用于区分Pod、Service、Replication Controller的key/value键值对，Pod、
  Service、 Replication Controller可以有多个label，但是每个label的key只能对应一个
  value。Labels是Service和Replication Controller运行的基础，为了将访问Service的请
  求转发给后端提供服务的多个容器，正是通过标识容器的labels来选择正确的容器。同样，
  Replication Controller也使用labels来管理通过pod 模板创建的一组容器，这样
  Replication Controller可以更加容易，方便地管理多个容器，无论有多少容器。

* Kubernates cont.

- Kubernates集群的操作系统,那么:
- Pod是新的进程 ----- 定义部署单元
- Docker是新的apt -- 打包部署单元
- 容器是新的虚拟机 -- 隔离部署单元

* 容器的未来

- AWS云服务
- Azure云
- IBM Bluemix
- Aliyun

未来云就像现在我们家里的_水_和_电_

- 无处不在,而你又没什么感觉
- 随时随地接入,并且费用低廉
- ... ...
