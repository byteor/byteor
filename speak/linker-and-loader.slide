Linux: Linker and Loader
成都
10 Jun 2017

周朋
p@ctriple.cn
https://github.com/tabesc
微信 lockrecv

* License

Copyright © Zhou Peng <p@ctriple.cn>

* ELF

executable and linkable file

  - a set of "headers" that describe the attributes of the file.

  - the program text.

  - a machine language representation of data that has initial values
    when the program starts execution, and an indication of how much
    space the kernel should allocate for uninitialized data, called
    BSS (the kernel initializes it to 0 at run time).

  - other sections, such as symbol table information.

* Linker

Compile Unit
Composite objects, libraries to executable.

* Loader

  $ ldd $(which go)
  linux-vdso.so.1 =>  (0x00007ffc1f4ec000)
  libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f7f3be7c000)
  libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7f3bab5000)
  /lib64/ld-linux-x86-64.so.2 (0x000055a9b5478000)

* Loader cont.

  $ /lib64/ld-linux-x86-64.so.2
  Usage: ld.so [OPTION]... EXECUTABLE-FILE [ARGS-FOR-PROGRAM...]
  You have invoked `ld.so', the helper program for shared library executables.
  This program usually lives in the file `/lib/ld.so', and special directives
  in executable files using ELF shared libraries tell the system's program
  loader to load the helper program from this file.  This helper program loads
  the shared libraries needed by the program executable, prepares the program
  to run, and runs it.  You may invoke this helper program directly from the
  command line to load and run an ELF executable file; this is like executing
  that file itself, but always uses this helper program from the file you
  specified, instead of the helper program file specified in the executable
  file you run.  This is mostly of use for maintainers to test new versions
  of this helper program; chances are you did not intend to run this program.

    --list                list all dependencies and how they are resolved
    --verify              verify that given object really is a dynamically
                          linked object we can handle
    --inhibit-cache       Do not use /etc/ld.so.cache
    --library-path PATH   use given PATH instead of content of the environment
                          variable LD_LIBRARY_PATH
    --inhibit-rpath LIST  ignore RUNPATH and RPATH information in object names
                          in LIST
    --audit LIST          use objects named in LIST as auditors

* Loader cont.

  $ LD_DEBUG=help go version
  Valid options for the LD_DEBUG environment variable are:

    libs        display library search paths
    reloc       display relocation processing
    files       display progress for input file
    symbols     display symbol table processing
    bindings    display information about symbol binding
    versions    display version dependencies
    scopes      display scope information
    all         all previous options combined
    statistics  display relocation statistics
    unused      determined unused DSOs
    help        display this help message and exit

  To direct the debugging output into a file instead of standard output
  a filename can be specified using the LD_DEBUG_OUTPUT environment variable.
