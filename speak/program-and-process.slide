Linux: Program and Process
成都
5 Jan 2017

周朋
zhoupeng@dmall.com
https://github.com/lockrecv
微信 lockrecv

* License

Copyright © Zhou Peng <lockrecv@outlook.com>

* 日程

- 程序和进程区别与联系
- 静态的程序
- 动态的进程
- 进程树
- 控制进程行为的几种方式

* Difference: Program vs Process

  +---------------------------------------------------------+
  |                     Program                     Process |
  +---------------------------------------------------------+
  |     Persist:           Disk                      Memory |
  |        Size:          Fixed                 Grow/Shrink |
  |      Status:         Static             PID/UID/FDs/... |
  |       Where:        /bin/ls                    /proc/1/ |
  |   Operation:        R/W/D/M           KILL/PAUSE/RESUME |
  | Composition: Header/Section    Stack/Heap/BSS/Data/Text |
  |  Management:   FS Hierarchy   Kernel task_struct rbtree |
  |                       ... ...                           |
  +---------------------------------------------------------+

* Program

  $ file $(which go)
  /usr/local/go/bin/go: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),
                        dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, not stripped

* Program cont.

  $ LC_ALL=C readelf -h $(which go)
  ELF Header:
    Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
    Class:                             ELF64
    Data:                              2's complement, little endian
    Version:                           1 (current)
    OS/ABI:                            UNIX - System V
    ABI Version:                       0
    Type:                              EXEC (Executable file)
    Machine:                           Advanced Micro Devices X86-64
    Version:                           0x1
    Entry point address:               0x457570
    Start of program headers:          64 (bytes into file)
    Start of section headers:          624 (bytes into file)
    Flags:                             0x0
    Size of this header:               64 (bytes)
    Size of program headers:           56 (bytes)
    Number of program headers:         10
    Size of section headers:           64 (bytes)
    Number of section headers:         36
    Section header string table index: 9

* Program cont.

  $ size $(which go)
     text	   data	    bss	    dec	    hex	filename
  6652281	 233755	 144656	7030692	 6b47a4	/usr/local/go/bin/go

  $ strings $(which go) | tail
  main.(*noToolchain).ldShared
  main.(*noToolchain).cc
  type..hash.[2]os.Signal
  type..eq.[2]os.Signal
  type..hash.[2]main.tagCmd
  type..eq.[2]main.tagCmd
  type..hash.[1]main.tagCmd
  type..eq.[1]main.tagCmd
  type..hash.[38]string
  type..eq.[38]string

* Program cont.

  $ nm $(which go) | tail
  0000000000ab27b8 B x_cgo_inittls
  0000000000401710 T x_cgo_mmap
  0000000000401410 T x_cgo_notify_runtime_init_done
  0000000000401450 T x_cgo_set_context_function
  0000000000401740 T x_cgo_setenv
  0000000000401770 T x_cgo_sigaction
  0000000000401520 T x_cgo_sys_thread_create
  0000000000401920 T x_cgo_thread_start
  0000000000ab27c0 B x_cgo_threadentry
  0000000000401760 T x_cgo_unsetenv

* Process

/proc/{pid}/

  $ pgrep systemd
  1
  244
  274
  595
  737
  1702

* Process cont.

  $ sudo ls /proc/1
  attr        coredump_filter  gid_map          mountinfo   oom_score      schedstat  status
  autogroup   cpuset           io               mounts      oom_score_adj  sessionid  syscall
  auxv        cwd              limits           mountstats  pagemap        setgroups  task
  cgroup      environ          loginuid         net         personality    smaps      timers
  clear_refs  exe              map_files        ns          projid_map     stack      timerslack_ns
  cmdline     fd               maps             numa_maps   root           stat       uid_map
  comm        fdinfo           mem              oom_adj     sched          statm      wchan

maps
cmdline
mounts
status
env
cwd
root
syscall
sessionid

* Process cont.

fork()

内核创建一个当前进程的副本,正副本执行同一个Program.

exec()

加载新的Program作为当前进程的执行对象

.code c/fork-vs-exec

* Process cont.

.code c/init-getty-login-shell.txt

* Process cont.

session
group
pid
ppid
uid
euid
