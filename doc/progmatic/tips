tip 1:
    care about your craft

tip 2:
    think! about your work

tip 3:
    provide options, don't make lame excuses

tip 4:
    don't live with broken windows

tip 5:
    be a catalyst for change

tip 6:
    remember the big picture

tip 7:
    make quality a requirements issue

tip 8:
    invest regularly in your knowledge portfolio

tip 9:
    critically analyse what you read and hear

tip 10:
    it's both what you say and the way you say it

tip 11:
    dry - don't repeat yourself

tip 12:
    make it easy to reuse

tip 13:
    eliminate effects between unrelated things

tip 14:
    there are no final decisions

tip 15:
    use tracer bullets to find the target

tip 16:
    prototype to learn

tip 17:
    program close to the problem domain

tip 18:
    estimate to avoid surprises

tip 19:
    iterate the schedule with the code

tip 20:
    keep knowledge in plain text

tip 21:
    use the power of command shells

tip 22:
    use a single editor well

tip 23:
    always use source code control

tip 24:
    fix the problem, not the blame

tip 25:
    don't panic

tip 26:
    "select" isn't broken

tip 27:
    don't assume it - prove it

tip 28:
    learn a text manipulation language

tip 29:
    write code that writes code

tip 30:
    you can't write perfect software

tip 31:
    design with contracts

tip 32:
    crash early

tip 33:
    if it can't happen, use assertions to ensure that it won't

tip 34:
    use exceptions for exceptional problems

tip 35:
    finish what you start

tip 36:
    minimize coupling between modules

tip 37:
    configure, don't integrate

tip 38:
    put abstractions in code, details in metadata

tip 39:
    analyze workflow to improve concurrency

tip 40:
    design using services

tip 41:
    always design for concurrency

tip 42:
    separate views from models

tip 43:
    use blackboards to coordinate workflow

tip 44:
    don't program by coincidence

tip 45:
    estimate the order of your algorithms

tip 46:
    test your estimates

tip 47:
    refactor early, refactor often

tip 48:
    design to test

tip 49:
    test your software, or your users will

tip 50:
    don't use wizard code you don't understand

tip 51:
    don't gather requirements - dig for them

tip 52:
    work with a user to think like a user

tip 53:
    abstractions live longer than details

tip 54:
    use a project glossary

tip 55:
    don't think outside the box - find the box

tip 56:
    listen to nagging doubts - start when you're ready

tip 57:
    some things are better done than described

tip 58:
    don't be a slave to formal methods

tip 59:
    expensive tools do not produce better designs

tip 60:
    organize around functionality, not job functions

tip 61:
    don't use manual procedures

tip 62:
    test early, test often. test automatically

tip 63:
    coding ain't done 'til all the tests run

tip 64:
    use saboteurs to test your testing

tip 65:
    test state coverage, not code coverage

tip 66:
    find bugs once

tip 67:
    treat english as just another programming language

tip 68:
    build documentation in, don't bolt it on

tip 69:
    gently exceed your uses' expectations

tip 70:
    sign your work
