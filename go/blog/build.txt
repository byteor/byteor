                            ━━━━━━━━━━━━━━━
                             GO BUILD TAGS

                              Dave Cheney
                            ━━━━━━━━━━━━━━━

1 Build tags
════════════

  When `go build' is asked to build a package it will analyze each
  source file in the package looking for build tags. These tags control
  whether `go build' will pass the file to the compiler. A build tags
  follow these three rules:


1.1 a build tag is evaluated as the OR of space-separated options
─────────────────────────────────────────────────────────────────


1.2 each option evaluates as the AND of its comma-separated terms
─────────────────────────────────────────────────────────────────


1.3 each term is an alphanumeric word or, preceded by !, its negation
─────────────────────────────────────────────────────────────────────

  ┌────
  │ // +build linux darwin
  │ // +build 386
  │                   <-- NOTE: newline is required to tell package from file comments, =go vet= can detect problems like this
  │ package somepkg
  └────

  constrains the build to linux/386 or darwin/386 platforms only.


2 File suffixes
═══════════════

  If your source file includes the suffix `_$GOOS.go' then it will only
  be built on that platform. All other platforms will behave as if the
  file is not present. The same applies for `$GOARCH.go'. The two can be
  combined as `_$GOOS_$GOARCH.go', but not `_$GOARCH_$GOOS.go'.

  ┌────
  │ print_freebsd_arm.go  // only builds on freebsd/arm systems
  │ print_plan9.go        // only builds on plan9
  └────
