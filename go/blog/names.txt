                            ━━━━━━━━━━━━━━━━
                                GO NAMES

                             Andrew Gerrand
                            ━━━━━━━━━━━━━━━━


Table of Contents
─────────────────

1 Good names
.. 1.1 Consistent (easy to guess)
.. 1.2 Short (easy to type)
.. 1.3 Accurate (easy to understand)
2 A rule of thumb
3 Use MixedCase
4 Local variables
.. 4.1 Bad
.. 4.2 Good
5 Parameters
6 Return values
7 Receivers
8 Exported package-level names
9 Interface Types
10 Errors
11 Packages
12 Import paths





1 Good names
════════════

1.1 Consistent (easy to guess)
──────────────────────────────


1.2 Short (easy to type)
────────────────────────


1.3 Accurate (easy to understand)
─────────────────────────────────


2 A rule of thumb
═════════════════

  The greater the distance between a name's declaration and its uses,
  the longer the name should be.


3 Use MixedCase
═══════════════

  Names in Go should use MixedCase (Don't use names_with_underscores.)
  Acronyms should be all capitals, as in ServeHTTP and IDProcessor.


4 Local variables
═════════════════

  Keep them short; long names obscure what the code does.

  Prefer i to index. Prefer r to reader.

  Longer names may help in long functions, or functions with many local
  variables.


4.1 Bad
───────

  ┌────
  │ func RuneCount(buffer []byte) int {
  │     index, count := 0, 0
  │     for index < len(buffer) {
  │         if buffer[index] < RuneSelf {
  │             index++
  │         } else {
  │             _, size := DecodeRune(buffer[index:])
  │             index += size
  │         }
  │         count++
  │     }
  │     return count
  │ }
  └────


4.2 Good
────────

  ┌────
  │ func RuneCount(buffer []byte) int {
  │     i, n := 0, 0
  │     for i < len(buffer) {
  │         if buffer[i] < RuneSelf {
  │             i++
  │         } else {
  │             _, size := DecodeRune(buffer[index:])
  │             i += size
  │         }
  │         n++
  │     }
  │     return n
  │ }
  └────


5 Parameters
════════════

  Function parameters are like local variables, but they also serve as
  documentation.

  Where the types are descriptive, they should be short:

  ┌────
  │ func AfterFunc(d Duration, f func()) *Timer
  │
  │ func Escape(w io.Writer, s []byte)
  └────

  Where the types are more ambiguous, the names may provide
  documentation.

  ┌────
  │ func Unix(sec, nsec int64) Time
  │
  │ func HasPrefix(s, prefix []byte) bool
  └────


6 Return values
═══════════════

  Return values on exported functions should only be named for
  documentation purposes.

  ┌────
  │ func Copy(dst Writer, src Reader) (written int64, err error)
  │
  │ func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)
  └────


7 Receivers
═══════════

  Receivers are a special kind of argument.

  By convention, they are one or two characters that reflect the
  receiver type, because they typically appear on almost every line.

  ┌────
  │ func (b *Buffer) Read(p []byte) (n int, err error)
  │
  │ func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request)
  │
  │ func (r Rectangle) Size() Point
  └────

  Receiver names should be consistent across a type's methods. (Don't
  use r in one method and rdr in another.)


8 Exported package-level names
══════════════════════════════

  Exported names are qualified by their package names. That's why we
  have `bytes.Buffer' and `strings.Reader', not `bytes.ByteBuffer' and
  `strings.StringReader'.


9 Interface Types
═════════════════

  Interface that specify just one method are usually just that function
  name with 'er' appended to it.

  ┌────
  │ type Reader interface {
  │     Read(p []byte) (n int, err error)
  │ }
  └────

  Sometimes the result isn't correct English, but we do it anyway:

  ┌────
  │ type Execer interface {
  │     Exec(query string, args []Value) (Result, error)
  │ }
  └────

  Sometimes we use English to make it nicer:

  ┌────
  │ type ByteReader interface {
  │     ReadByte() (c byte, err error)
  │ }
  └────

  When an interface includes multiple methods, choose a name that
  accurately describes its purpose (examples: net.Conn,
  http.ResponseWriter, io.ReadWriter).


10 Errors
═════════

  Error types should be of the form `FooError':

  ┌────
  │ type ExitError struct {
  │     //...
  │ }
  └────

  Error values should be of the form `ErrFoo':

  ┌────
  │ var ErrFormat = errors.New("image: unknown format")
  └────


11 Packages
═══════════

  Choose package names that lend meaning to the names they export. Steer
  clear of `util', `common', and the like.


12 Import paths
═══════════════

  The last component of a package path should be the same as the package
  name.

  ┌────
  │ "compress/zip" // package zip
  └────

  Avoid stutter in repository and package paths:

  ┌────
  │ "code.google.com/p/goauth2/oauth2" // bad; my fault
  └────

  For libraries, it often works to put the package code in the repo
  root:

  ┌────
  │ "github.com/golang/oauth2" // package oauth2
  └────

  Also avoid upper case letters (not all file systems are case
  sensitive).
