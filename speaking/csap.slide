深入理解计算机系统
成都
5 Feb 2018

周朋
park@ideapark.io
https://github.com/ideapark
微信 ideapark

* License

Copyright © Zhou Peng <park@ideapark.io>

* Computer Systems: A Programmer's Perspective

.image csap.png

* 计算机系统漫游

Hello程序的整个生命周期

  #include <stdio.h>

  int main(void)
  {
    printf("hello, world\n");
  }

* 计算机系统漫游

编译系统

  hello.c         +-------+      hello.i     +-------+      hello.s
  --------------> |  cpp  | ---------------> |  cc1  | -------------------+
    source file   +-------+   modified src   +-------+   assembly file    |
      (text)                     (text)                     (text)        |
                                                                          |
                                          printf.o                        |
                                              |                           |
                       hello       +-----+ <--+  hello.o      +------+    |
                <----------------- | ld  | <----------------- |  as  | <--+
                   executable obj  +-----+   relocatable obj  +------+
                     (binary)                   (binary)

* 计算机系统漫游

计算机硬件体系结构

  CPU
  +----------------------+
  |       register       |
  |        +----+   +-+  |
  | +--+   |----|-->|A|  |
  | |pc|   |----|   |L|  |
  | +--+   |----|<--|U|  |
  |        +----+   +-+  |
  |          ⬍           | System Bus         Memory Bus
  |  +---------------+   | /    +------------+    |     +-------------+
  |  | BUS Interface | <------> | I/O Bridge | <------> | Main Memory |
  |  +---------------+   |      +------------+          +-------------+
  +----------------------+            ⬆
  <=============================================================| |=| |=| |=====>
          ⬇                   ⬇    I/O BUS           ⬇      Extended Slot, Network Adapter
      +---------------+ +---------------+       +----------------+
      | USB Controler | | Video Adapter |       | Disk Controler |
      +---------------+ +---------------+       +----------------+
        |         |            |                       |
      Mouse    Keyboard     Monitor                 ^^^^^^^^
                                                    | Disk |
                                                    +......+

* 计算机系统漫游

软硬件层次关系

  +------------------------------------------+ <--+
  |              User Application            |    |
  +------------------------------------------+    | Software
  |              Operating System            |    |
  +----------+---------------+---------------+ <--+
  |   CPU    |  Main Memory  |  I/O Device   |    | Hardware
  +----------+---------------+---------------+ <--+

操作系统提供的抽像

  +-------------- Process --------------------------+
  |                                                 |
  |            +------------ Virtual Memory --------|
  |            |                                    |
  |            |                                    |
  |            |                   +--- File -------|
  |            |                   |                |
  +------------+-------------------+----------------+
  |    CPU     |    Main Memory    |   I/O Device   |
  +------------+-------------------+----------------+

* 计算机系统漫游

计算机存储金字塔

  Small/Expensive/Fast
    ↑
    |  L0: register                               #
    |                                            ###
    |  L1: L1-cache                             #####
    |                                          #######
    |  L2: L2-cache                           #########
    |                                        ###########
    |  l3: L3-cache                         #############
    |                                      ###############
    |  L4: DRAM                           #################
    |                                    ###################
    |  L5: Local Disk                   #####################
    |                                  #######################
    |  L6: Distributed File System    #########################
    ↓
  Huge/Cheap/Slow

* 计算机系统漫游

分时系统UTS

  Time                     Process A    #    Process B
  $                      ---------------#----------------------------------
  |                            ↓        #             User Space
  |            read ---> ------+--------#----------------------------------
  |                             \       #
  |                              +------>------+      Kernel Space <<Context Switch>>
  |                                     #       \
  |                      ---------------#--------+-------------------------
  |                                     #        ↓    User Space
  |  disk interrupt ---> ---------------#--------+-------------------------
  |                                     #       /
  |                              +------<------+      Kernel Space <<Context Switch>>
  |                             /       #
  |                      ------+--------#----------------------------------
  |                            ↓        #             User Space
  |     read return ---> ---------------#----------------------------------
  |                                     #
  ↓                                     #

* 计算机系统漫游

程序在内存中

  `              +----------------------------+
                 |   Kernel Virtual Address   |  User code can't access
                 +----------------------------+
                 |   User Stack   ⬇           |
                 +----------------------------+
                 |                ⬆           |
                 +----------------------------+
                 |   Dynamic Library Area     | printf@glibc
                 +----------------------------+
                 |   Heap runtime ⬆           |
                 +----------------------------+ <---+
                 |   Read/Write data          |     |
                 +----------------------------+    Load from executable file
  0x08048000(32) |   Read Only code/data      |     |
  0x00400000(64) +----------------------------+ <---+
                 |                            |
              0  +----------------------------+

* 数据表示

无符号数表示（原码）

  2^3 = 8 ---------------->
  2^2 = 4 -------->
  2^1 = 2 ---->
  2^0 = 1 -->
                              1 1 1 1 1 1 1
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
          | | | | | | | | | | | | | | | | |
   [0001] |^^   |       |               |
   [0011] |&&&&^^       |               |
   [0111] |>>>>>>>>&&&&^^               |
   [1111] |################>>>>>>>>&&&&^^

   计算公式：
   [1111] = 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0 = 8 + 4 + 2 + 1 = 15

* 数据表示

有符号数表示（补码）

  `       <--------------- -2^3 = -8
                  2^2 = 4 ------->
                  2^1 = 2 --->
                  2^0 = 1 ->
        - - - - - - - -
        8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8
        | | | | | | | | | | | | | | | | |
  [0001]                 |^^   |       |
  [0011]                 |&&&&^^       |
  [0111]                 |########&&&&^^
  [1000] <<<<<<<<<<<<<<<<|
  [1111] ########&&&&^^<<|

  计算公式：
  [1111] = -1*2^3 + 1*2^2 + 1*2^1 + 1*2^0 = -8 + 4 + 2 + 1 = -1

* 数据表示

浮点数表示

  V = (-1)^s * M * 2^E

  s: sign (1:negative 0:negative)
  M: significand
  E: exponent

  Float

    3 3      2 2
    1 0      3 2                     0
  +-+--------+-----------------------+
  |s|   exp  |         frac          |
    1     8             23

  Double

    6 6         5 5
    3 2         2 1                                                  0
  +-+-----------+----------------------------------------------------+
  |s|    exp    |                      frac                          |
    1     11                            52

* 数据表示

特殊浮点数(Inf/NaN)

  1. Normalized
  +-+-------------+------------------+
  |s| !=0 & !=255 |       f          |
  +-+-------------+------------------+

  2. Non-Normalized
  +-+--------+-----------------------+
  |s|00000000|            f          |
  +-+--------+-----------------------+

  3. Infinite
  +-+--------+-----------------------+
  |s|11111111|00000000000000000000000|
  +-+--------+-----------------------+

  4. NaN
  +-+--------+-----------------------+
  |s|11111111|      !=0              |
  +-+--------+-----------------------+

* 程序的机器级表示

x86寄存器

  31                15     8 7       0
  +----------------------------------+  +----------------------------------+
  |                +-----------------|  |                +-----------------|
  |%eax         %ax|   %ah  |   %al  |  |%esi         %si|                 |
  |                +-----------------|  |                +-----------------|
  +----------------------------------+  +----------------------------------+
  +----------------------------------+  +----------------------------------+
  |                +-----------------|  |                +-----------------|
  |%ecx         %cx|   %ch  |   %cl  |  |%edi         %di|                 |
  |                +-----------------|  |                +-----------------|
  +----------------------------------+  +----------------------------------+
  +----------------------------------+  +----------------------------------+
  |                +-----------------|  |                +-----------------|
  |%edx         %dx|   %dh  |   %dl  |  |%esp         %sp|                 | Stack Pointer
  |                +-----------------|  |                +-----------------|
  +----------------------------------+  +----------------------------------+
  +----------------------------------+  +----------------------------------+
  |                +-----------------|  |                +-----------------|
  |%ebx         %bx|   %bh  |   %bl  |  |%ebp         %bp|                 | Frame Pointer
  |                +-----------------|  |                +-----------------|
  +----------------------------------+  +----------------------------------+

* 程序的机器级表示

- *call* 指令转移空制权到被调用函数第一条指令处
- *ret* 指令转移控制权到调用函数call指令的下一条指令处

  `                       ①                                        ②
                  +-------------------+                   +-------------------+
                  | %eip | 0x080483dc |                   | %eip | 0x08048394 |
              +-- | %esp | 0xff9bc960 |               +-- | %esp | 0xff9bc95c |
              |   +-------------------+               |   +-------------------+
  Call Before |   +-------------------+    Call After |   +-------------------+
              |   |        *          |               |   |        *          |
              |   |        *          |               |   |        *          |
              +-> +-------------------+               |   |-------------------|
                                                      |   |    0x080483e1     |
                                                      +-> +-------------------+
                          ③
                  +-------------------+
                  | %eip | 0x080483e1 |
              +-- | %esp | 0xff9bc960 |
              |   +-------------------+
  Call Return |   +-------------------+
              |   |        *          |
              |   |        *          |
              +-> +-------------------+

* 程序的机器级表示

函数调用栈帧

  `             Stack Bottom (high)
                +-------------+ <--+
                |     *       |    | Old frame
                |-------------| <--+
                |-------------|    |
          +4+4n |   argN      |    |
                |-------------|    | Caller frame
                |-------------|    |
             +8 |   arg1      |    |
                |-------------|    |
             +4 |  ret addr   |    |
                |-------------| <--+
  Frame ptr --> | caller %ebp |    |
     %ebp       |-------------|    |
             -4 |             |    |
                |  Saved regs |    | Callee frame
                |  Local var  |    |
                |-------------|    |
                |  Args area  |    |
  Stack ptr --> |     *       |    |
     %esp       +-------------+ <--+
                Stack Top (Low)

* 处理器体系结构

TODO(zhoupeng):这章理解难度太大,偏具体硬件设计实现

* 代码优化

- 性能衡量指标

Cycles Per Element (CPE)

- 消除循环的低效率

循环中的不变量(例如数组长度)提出到循环外计算一次

- 减少过程调用

内联函数

- 消除不必要的存储器引用

引入临时寄存器存放中间过程输出

* 存储器层次结构

各级存储绝对/相对时延

  |        Memory Access                       | Abs Delay | Relative Delay |
  |--------------------------------------------+-----------+----------------|
  | 1 CPU cycle                                |    0.3 ns |            1 s |
  | Level 1 cache access                       |    0.9 ns |            3 s |
  | Level 2 cache access                       |    2.8 ns |            9 s |
  | Level 3 cache access                       |   12.9 ns |           43 s |
  | Main memory access (DRAM, from CPU)        |    120 ns |          6 min |
  | Solid-state disk I/O (flash memory)        | 50-150 us |       2-6 days |
  | Rotational disk I/O                        |   1-10 ms |    1-12 months |
  | Internet: San Francisco to New York        |     40 ms |        4 years |
  | Internet: San Francisco to United Kingdom  |     81 ms |        8 years |
  | Internet: San Francisco to Australia       |    183 ms |       19 years |
  | TCP packet retransmit                      |    1-3 s  |  105-317 years |
  | OS virtualization system reboot            |      4 s  |      423 years |
  | SCSI command time-out                      |     30 s  |    3 millennia |
  | Hardware (HW) virtualization system reboot |     40 s  |    4 millennia |
  | Physical system reboot                     |      5 m  |   32 millennia |

* 存储器层次结构

- 时间局部性(temporal locality)

一个具有良好时间局部性的程序,被引用过一次的存储器位置很可能在不远的将来再被多次引用.

- 空间局部性(spatial locality)

一个具有良好空间局部性的程序,一个存储器位置被引用了一次,那么程序很可能在不远的将来引用附近的一个存储器位置.

- 缓存(cache)

存储器层次结构中心思想,对于每个k,位于k层的更快更小的存储设备作为位于k+1层的更大更慢的存储设备的缓存.

* 链接

What

- 将多个目标文件数据代码和并生成一个可执行文件

When

- 编译时(ld)
- 加载时(ld-linux.so)
- 运行时(dlfcn.h: dlopen/dlsym/dlclose)

* 链接

多重符号定义解析规则1

- 不允许两个同名强类型符号

  ERROR: multiple strong function
  1 /* foo1.c */   1 /* bar1. c*/
  2 int main() {   2 int main() {
  3   return 0;    3   return 0;
  4 }              4 }

  ERROR: multiple strong global variable
  1 /* foo2.c */   1 /* bar2.c */
  2 int x = 15231; 2 int x = 15231;
  3                3
  4 int main() {   4 void f() {
  5   return 0     5 }
  6 }

* 链接

多重符号定义解析规则2

- 一强一弱选择强类型符号

  OK: choose foo2.c
  1 /* foo2.c */   1 /* bar3.c */
  2 int x = 15231; 2 int x;
  3                3
  4 int main() {   4 void f() {
  5   return 0     5 }
  6 }

* 链接

多重符号定义解析规则3

- 两个弱类型符号编译器任选一个

  BUG: may choose double or int
  1 /* foo4.c */   1 /* bar4.c */
  2 double x;      2 int x;
  3                3
  4 int main() {   4 void f() {
  5   return 0     5 }
  6 }

  gcc -fno-common: print warning when came across multiple
                   definition global variables

* 异常控制流

异常类型

  +-----------+-----------------------+----------------+------------------------------+
  | Type      | Cause                 | [S]ync/[A]snyc | Return                       |
  +-----------+-----------------------+----------------+------------------------------+
  | interrupt | IO Device Signal      | A              | Next Instruction             |
  | trap      | Raised Purposely      | S              | Next Instruction             |
  | fault     | Recoverable Fault     | S              | Possible Current Instruction |
  | abort     | Non-Recoverable Fault | S              | No Return                    |
  +-----------+-----------------------+----------------+------------------------------+

* 异常控制流

中断
异步发生，返回到被中断指令的下一条指令处，被中断程序毫无影响，例如磁盘数据传输完成。

  Iprev |
        |
        |    Control transfered to interrupt hander
  Icurr +-------------------------+
                                  |
                                  | Interrupt handler run
                                  |
  Inext +-------------------------+
        |    Control transfered to next instruction
        |
        ↓

* 异常控制流

陷阱
同步触发，程序调用cpu特定指令出发，返回到被中断指令的下一个条指令，例如系统调用。

  Iprev   |
          |
          |    Control transfered to interrupt hander
  syscall +-------------------------+
                                    |
                                    | Interrupt handler run
                                    |
  Inext   +-------------------------+
          |    Control transfered to next instruction
          |
          ↓

* 异常控制流

错误
同步触发，有可能被终止，例如段错误。

  Iprev |
        |
        |    Control transfered to hander
  Icurr +------------------------+
        |\                       | Handler run
        | +----------------------+***********************-> ABORT
        |             Return to Icurr or abort
        |
        |
        |
        ↓

* 异常控制流

退出
同步触发，程序被终止，例如空指针，除零。

  Iprev |
        |
        |    Control transfered to hander
  Icurr +-------------------------+
                                  |
                                  | Terminate program
                                  +-------------------------> ABORT
                                    Return to exit() routine

* 虚拟存储器

- 简化链接
- 简化加载
- 简化共享
- 简化内存分配

* 虚拟存储器

存储器管理

      Virtual Memory Address                      Physical Memory Address
                                                      +-----------+
            +-----+                                   |           |
            |     |                                   +-----------+
            +-----+                                   |           |
            | VP1 |------------------+                +-----------+
      Task1 +-----+                  +--------------->|###########|
            | VP2 |------------+                      +-----------+
            +-----+            |                      |           |
            |     |            |                      +-----------+
            +-----+            |                      |           |
                               |                      +-----------+
            +-----+            +-------------+------->|###########| (Share Page)
            |     |                          |        +-----------+
            +-----+                          |        |           |
            | VP1 |--------------------------+        +-----------+
      Task2 +-----+                                   |           |
            | VP2 |--------+                          +-----------+
            +-----+        |                          |           |
            |     |        |                          +-----------+
            +-----+        +------------------------->|###########|
                                                      +-----------+

* 虚拟存储器

内存保护

  `           Protect Bit Page Table                    Physical Memory
            SUP   READ  WRITE  Address                   +----------+
            +-----+-----+-----+---------+                |          | PP0
        VP0:|  N  |  Y  |  N  |    PP6  |--------+       +----------+
            +-----+-----+-----+---------+        |       +----------+
  Task1 VP1:|  N  |  Y  |  Y  |    PP4  |---+    |  +--->|          | PP2
            +-----+-----+-----+---------+   |    |  |    +----------+
        VP2:|  Y  |  Y  |  Y  |    PP2  |---|----|--+    |          |
            +-----+-----+-----+---------+   |    |       +----------+
                                            +----|------>|          | PP4
            SUP   READ  WRITE  Address           |       +----------+
            +-----+-----+-----+---------+        |       +----------+
        VP0:|  N  |  Y  |  N  |    PP9  |----+   +------>|          | PP6 (Share Page)
            +-----+-----+-----+---------+    |   |       +----------+
  Task2 VP1:|  Y  |  Y  |  Y  |    PP6  |----|---+       |          |
            +-----+-----+-----+---------+    |           +----------+
        VP2:|  N  |  Y  |  Y  |    PP11 |--+ |           +----------+
            +-----+-----+-----+---------+  | +---------->|          | PP9
                                           |             +----------+
                                           |             +----------+
                                           +------------>|          | PP11
                                                         +----------+

* 系统级I/O

UNIX对外设的统一抽像

- 一切 I/O 设备皆文件
- 文件就是一个字节序列
- open/read/write/close

* 系统级I/O

文件共享

     File Descriptor Table            Open File Table               v-node Table
          (Process)                       (Kernel)                     (Kernel)
          +--------+                       File A
     fd 0 |        |             +------>+--------+                   +-------+
          +--------+             |       |filepath|------------------>| Mode  |
     fd 1 |        |-------------+       +--------+                   +-------+
          +--------+                     |refcnt=1|                   | Size  |
     fd 2 |        |                     +--------+                   +-------+
          +--------+                     | ...    |                   | ...   |
     fd 4 |        |-------+             +--------+                   +-------+
          +--------+       |
                           |               File B
                           +------------>+--------+                   +-------+
                                         |filepath|------------------>| Mode  |
                                         +--------+                   +-------+
                                         |refcnt=1|                   | Size  |
                                         +--------+                   +-------+
                                         | ...    |                   | ...   |
                                         +--------+                   +-------+

* 系统级I/O

硬连接(hard links)

     File Descriptor Table            Open File Table               v-node Table
          (Process)                       (Kernel)                     (Kernel)
          +--------+                       File A
     fd 0 |        |             +------>+--------+                   +-------+
          +--------+             |       |filepath|---------+-------->| Mode  |
     fd 1 |        |-------------+       +--------+         |         +-------+
          +--------+                     |refcnt=1|         |         | Size  |
     fd 2 |        |                     +--------+         |         +-------+
          +--------+                     | ...    |         |         | ...   |
     fd 4 |        |-------+             +--------+         |         +-------+
          +--------+       |                                |
                           |               File B           |
                           +------------>+--------+         |
                                         |filepath|---------+
                                         +--------+
                                         |refcnt=1|
                                         +--------+
                                         | ...    |
                                         +--------+

* 系统级I/O

进程共享

     File Descriptor Table            Open File Table               v-node Table
          (Process)                       (Kernel)                     (Kernel)
            Task1
          +--------+                       File A
     fd 0 |        |             +------>+--------+                   +-------+
          +--------+             |       |filepath|------------------>| Mode  |
     fd 1 |        |---+---------+       +--------+                   +-------+
          +--------+   |                 |refcnt=1|                   | Size  |
     fd 2 |        |   |                 +--------+                   +-------+
          +--------+   |                 | ...    |                   | ...   |
     fd 3 |        |---|---+             +--------+                   +-------+
          +--------+   |   |
                       |   |               File B
            Task2      |   +--+--------->+--------+                   +-------+
          +--------+   |      |          |filepath|------------------>| Mode  |
     fd 0 |        |   |      |          +--------+                   +-------+
          +--------+   |      |          |refcnt=1|                   | Size  |
     fd 1 |        |---+      |          +--------+                   +-------+
          +--------+          |          | ...    |                   | ...   |
     fd 2 |        |----------+          +--------+                   +-------+
          +--------+

* 网络编程

因特网应用程序的硬件和软件

  `                    Client Host                          Server Host
                  +------------------+                 +------------------+
                  |     Client       | User Code       |    Server Code   |
                  +------------------+                 +------------------+
       Syscall ---------> ⬍                                      ⬍
                  +------------------+                 +------------------+
                  |      TCP/IP      | Kernel Code     |      TCP/IP      |
                  +------------------+                 +------------------+
     Interrupt ---------> ⬍                                      ⬍
                  +------------------+                 +------------------+
                  | Network Adapter  | Hardware        | Network Adapter  |
                  +------------------+                 +------------------+
                          ⬍                                      ⬍
                  +-------------------------------------------------------+
                  |               Global Internet Network                 |
                  +-------------------------------------------------------+

* 并发编程

- 基于进程的并发服务器
- 基于I/O多路复用的并发编程
  echo: 1) Client connection
        2) User keyboard input
  FOR {
    SELECT {
      CASE msg := <-socket:
        print(msg)
      CASE msg := <-stdin:
        print(msg)
    }
  }

- 基于线程的并发编程

* 并发编程

同步问题分析进度图(progess graph)

  执行轨际: H1, L1, U1, H2, L2, S1, T1, U2, S2, T2

  Thread2
     |
  T2 |                  +
     |                  |
  S2 |     ..........   |
     |     . UNSAFE .   |
  U2 |     .  AREA  .   |
     |     .    +---+---+
  L2 |     .    |   .
     |     .....|....
  H2 |          |
     +--+---+---+-------------- Thread1
      H1  L1  U1  S1  T1
