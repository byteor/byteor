#+TITLE: Go Names
#+AUTHOR: Andrew Gerrand
#+URL: https://talks.golang.org/2014/names.slide

* Good names

** Consistent (easy to guess)
** Short (easy to type)
** Accurate (easy to understand)

* A rule of thumb

The greater the distance between a name's declaration and its uses, the longer
the name should be.

* Use MixedCase

Names in Go should use MixedCase
(Don't use names_with_underscores.)
Acronyms should be all capitals, as in ServeHTTP and IDProcessor.

* Local variables

Keep them short; long names obscure what the code does.

Prefer i to index.
Prefer r to reader.

Longer names may help in long functions, or functions with many local variables.

** Bad

#+BEGIN_SRC go
func RuneCount(buffer []byte) int {
    index, count := 0, 0
    for index < len(buffer) {
        if buffer[index] < RuneSelf {
            index++
        } else {
            _, size := DecodeRune(buffer[index:])
            index += size
        }
        count++
    }
    return count
}
#+END_SRC

** Good

#+BEGIN_SRC go
func RuneCount(buffer []byte) int {
    i, n := 0, 0
    for i < len(buffer) {
        if buffer[i] < RuneSelf {
            i++
        } else {
            _, size := DecodeRune(buffer[index:])
            i += size
        }
        n++
    }
    return n
}
#+END_SRC

* Parameters

Function parameters are like local variables, but they also serve as
documentation.

Where the types are descriptive, they should be short:

#+BEGIN_SRC go
func AfterFunc(d Duration, f func()) *Timer

func Escape(w io.Writer, s []byte)
#+END_SRC

Where the types are more ambiguous, the names may provide documentation.

#+BEGIN_SRC go
func Unix(sec, nsec int64) Time

func HasPrefix(s, prefix []byte) bool
#+END_SRC

* Return values

Return values on exported functions should only be named for documentation
purposes.

#+BEGIN_SRC go
func Copy(dst Writer, src Reader) (written int64, err error)

func ScanBytes(data []byte, atEOF bool) (advance int, token []byte, err error)
#+END_SRC

* Receivers

Receivers are a special kind of argument.

By convention, they are one or two characters that reflect the receiver type,
because they typically appear on almost every line.

#+BEGIN_SRC go
func (b *Buffer) Read(p []byte) (n int, err error)

func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request)

func (r Rectangle) Size() Point
#+END_SRC

Receiver names should be consistent across a type's methods. (Don't use r in one
method and rdr in another.)

* Exported package-level names

Exported names are qualified by their package names. That's why we have
=bytes.Buffer= and =strings.Reader=, not =bytes.ByteBuffer= and
=strings.StringReader=.

* Interface Types

Interface that specify just one method are usually just that function name with
'er' appended to it.

#+BEGIN_SRC go
type Reader interface {
    Read(p []byte) (n int, err error)
}
#+END_SRC

Sometimes the result isn't correct English, but we do it anyway:

#+BEGIN_SRC go
type Execer interface {
    Exec(query string, args []Value) (Result, error)
}
#+END_SRC

Sometimes we use English to make it nicer:

#+BEGIN_SRC go
type ByteReader interface {
    ReadByte() (c byte, err error)
}
#+END_SRC

When an interface includes multiple methods, choose a name that accurately
describes its purpose (examples: net.Conn, http.ResponseWriter, io.ReadWriter).

* Errors

Error types should be of the form =FooError=:

#+BEGIN_SRC go
type ExitError struct {
    //...
}
#+END_SRC

Error values should be of the form =ErrFoo=:

#+BEGIN_SRC go
var ErrFormat = errors.New("image: unknown format")
#+END_SRC

* Packages

Choose package names that lend meaning to the names they export. Steer clear of
=util=, =common=, and the like.

* Import paths

The last component of a package path should be the same as the package name.

#+BEGIN_SRC go
"compress/zip" // package zip
#+END_SRC

Avoid stutter in repository and package paths:

#+BEGIN_SRC go
"code.google.com/p/goauth2/oauth2" // bad; my fault
#+END_SRC

For libraries, it often works to put the package code in the repo root:

#+BEGIN_SRC go
"github.com/golang/oauth2" // package oauth2
#+END_SRC

Also avoid upper case letters (not all file systems are case sensitive).
