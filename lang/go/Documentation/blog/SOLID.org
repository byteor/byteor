#+TITLE: SOLID
#+AUTHOR: Robert C Martin

* SOLID

** Single Responsibility Principle

A Class should have one, and only one, reason to change.

** Open / Closed Principle

Software entities should be open for extension, but closed for modification.

** Liskov Substitution Principle

Two types are substitutable if they exhibit such that the caller is unable to
tell the difference.

** Interface Segregation Principle

Clients should not be forced to depend on methods they do not use.

A great rule of thumb for GO is =accept interfaces, return structs=. Accepting
interfaces gives your API the greatest flexibility and returning structs allows
the people reading your code to quickly navigate to the correct function.
                                       -Jack Lindamood

** Dependency Inversion Principle

High-level modules should not depend on low-level modules. Both should depend
on abstractions. Abstractions should not depend on details. Details should
depend on abstractions.
