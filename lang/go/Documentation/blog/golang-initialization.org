#+TITLE: Golang Initialization
#+AUTHOR: https://golang.org/doc/effective_go.html

* Constants

** they are created at compile time, even when defined as locals in functions
** can only be numbers, characters (runes), strings or booleans
** iota enumerator

#+BEGIN_SRC go
type ByteSize float64

const (
    _           = iota // ignore first value by assigning to blank identifier
    KB ByteSize = 1 << (10*iota)
    MB
    GB
    TB
    PB
    EB
    ZB
    YB
)
#+END_SRC

* Variables

** computed at run time

#+BEGIN_SRC go
var (
    home   = os.Getenv("HOME")
    user   = os.Getenv("USER")
    gopath = os.Getenv("GOPATH")
)
#+END_SRC

* The init function

Finally, each source file can define its own niladic init function to set up
whatever state is required. (Actually each file can have multiple init
functions.) And finally means finally: init is called after all the variable
declarations in the package have evaluated their initializers, and those are
evaluated only after all the imported packages have been initialized.

Besides initializations that cannot be expressed as declarations, a common use
of init functions is to verify or repair correctness of the program state before
real execution begins.

#+BEGIN_SRC go
func init() {
    if user == "" {
        log.Fatal("$USER not set")
    }
    if home == "" {
        home = "/home/" + user
    }
    if gopath == "" {
        gopath = home + "/go"
    }
    // gopath may be overridden by --gopath flag on command line.
    flag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")
}
#+END_SRC
