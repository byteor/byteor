#+TITLE: Methods
#+AUTHOR: https://golang.org/doc/effective_go.html

* Pointers vs. Values

The rule about pointers vs. values for receivers is that value methods can be
invoked on pointers and values, but pointer methods can only be invoked on
pointers.

This rule arises because pointer methods can modify the receiver; invoking them
on a value would cause the method to receive a copy of the value, so any
modifications would be discarded. The language therefore disallows this mistake.
There is a handy exception, though. when the value is addressable, the language
takes care of the common case of invoking a pointer method on a value by
inserting the address operator automatically.

#+BEGIN_SRC go
type ByteSlice []byte

func (slice ByteSlice) Append(data []byte) []byte {
    // Body exactly the same as the append built-in function.
}

func (p *ByteSlice) Append(data []byte) {
    slice := *p
    // Body as above, without the return.
    *p = slice
}

func (p *ByteSlice) Write(data []byte) (n int, err error) {
    slice := *p
    // Again as above.
    *p = slice
    return len(data), nil
}

var b ByteSlice
fmt.Fprintf(&b, "This hour has %d days\n", 7)
#+END_SRC
