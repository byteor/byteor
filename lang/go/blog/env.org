* Go's Runtime Environment

** GOGC

=GOGC= is one of the oldest environment variable supported by the Go runtime.
It’s possibly older than =GOROOT=, but nowhere near as well known. =GOGC=
controls the aggressiveness of the garbage collector. By default this value is
assumed to be 100, which means garbage collection will not be triggered until
the heap has grown by 100% since the previous collection. Effectively GOGC=100
(the default) means the garbage collector will run each time the live heap
doubles.

Setting this value higher, say GOGC=200, will delay the start of a garbage
collection cycle until the live heap has grown to 200% of the previous size.
Setting the value lower, say GOGC=20 will cause the garbage collector to be
triggered more often as less new data can be allocated on the heap before
triggering a collection.

Setting GOGC=off will disable garbage collection entirely.

With the introduction of the low latency collector in Go 1.5, phrases like
“trigger a garbage collection cycle” become more fluid, but the underlying
message that values of GOGC greater than 100 mean the garbage collector will run
less often, and for values of GOGC less than 100, more often, remains the same.

** GOTRACEBACK

=GOTRACEBACK= controls the level of detail when a panic hits the top of your
program. In Go 1.5 GOTRACEBACK has four valid values.

*** GOTRACEBACK=[0,none] will suppress all tracebacks, you only get the panic message.
*** GOTRACEBACK=single is the new default behaviour that prints only the goroutine believed to have caused the panic.
*** GOTRACEBACK=[1,all] is the default behaviour, stack traces for all goroutines are shown, but stack frames related to the runtime are suppressed.
*** GOTRACEBACK=[2,system] is the same as the previous value, but frames related to the runtime are also shown, this will reveal goroutines started by the runtime itself.
*** GOTRACEBACK=crash is the same as the previous value, but rather than calling os.Exit, the runtime will cause the process to segfault, triggering a core dump if permitted by the operating system.

** GOMAXPROCS

=GOMAXPROCS= is the well known (and cargo culted via its runtime.GOMAXPROCS
counterpart), value that controls the number of operating system threads
allocated to goroutines in your program.

As of Go 1.5, the default value of =GOMAXPROCS= is the number of CPUs (whatever
your operating system considers to be a CPU) visible to the program at startup.

NOTE: the number of operating system threads in use by a Go program includes
threads servicing cgo calls, thread blocked on operating system calls, and may
be larger than the value of =GOMAXPROCS=.

** GODEBUG

Saving the best for last is =GODEBUG=. The contents of =GODEBUG= are interpreted
as a list of name=value pairs separated by commas, where each name is a runtime
debugging facility. Here is an example invoking godoc with garbage collection
and schedule tracing enabled:

*** gctrace
*** schedtrace
*** scheddetail
