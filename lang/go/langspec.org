#+TITLE: The Go Programming Language Specification
#+AUTHOR: p@ctriple.cn

* The Go Programming Language Specification :TOC_4_gh:noexport:
   - [[#introduction][Introduction]]
   - [[#notation][Notation]]
   - [[#source-code-representation][Source code representation]]
     - [[#characters][Characters]]
     - [[#letters-and-digits][Letters and digits]]
   - [[#lexical-elements][Lexical elements]]
     - [[#comments][Comments]]
     - [[#tokens][Tokens]]
     - [[#semicolons][Semicolons]]
     - [[#identifiers][Identifiers]]
     - [[#keywords][Keywords]]
     - [[#operators-and-punctuation][Operators and punctuation]]
     - [[#integer-literals][Integer literals]]
     - [[#floating-point-literals][Floating-point literals]]
     - [[#imaginary-literals][Imaginary literals]]
     - [[#rune-literals][Rune Literals]]
     - [[#strings-literals][Strings literals]]
   - [[#constants][Constants]]
   - [[#variabls][Variables]]
   - [[#types][Types]]
     - [[#method-sets][Method sets]]
     - [[#boolean-types][Boolean types]]
     - [[#numeric-types][Numeric types]]
     - [[#string-types][String types]]
     - [[#slice-types][Slice types]]
     - [[#struct-types][Struct types]]
     - [[#poiinter-types][Pointer types]]
     - [[#function-types][Function types]]
     - [[#interface-types][Interface types]]
     - [[#map-types][Map types]]
     - [[#channel-types][Channel types]]
   - [[#properties-of-types-and-values][Properties of types and values]]
     - [[#type-identify][Type identify]]
     - [[#assignability][Assignability]]
   - [[#blocks][Blocks]]
   - [[#declarations-and-scope][Declarations and scope]]
     - [[#label-scopes][Label scopes]]
     - [[#blank-identifier][Blank identifier]]
     - [[#predeclared-identifiers][Predeclared identifiers]]
     - [[#exported-identifiers][Exported identifiers]]
     - [[#uniqueness-of-identifiers][Uniqueness of identifiers]]
     - [[#constants-declarations][Constant declarations]]
     - [[#iota][Iota]]
     - [[#type-declarations][Type declarations]]
     - [[#variable-declarations][Varable declarations]]
     - [[#short-variable-declarations][Short variable declarations]]
     - [[#function-declarations][Function declarations]]
     - [[#method-declarations][Method declarations]]
   - [[#expressions][Expressions]]
     - [[#operands][Operands]]
     - [[#qualified-identifiers][Qualified identifiers]]
     - [[#composite-literals][Composite literals]]
     - [[#function-literals][Function literals]]
     - [[#primary-expressions][Primary expressions]]
     - [[#selectors][Selectors]]
     - [[#method-expressions][Method expressions]]
     - [[#method-values][Method values]]
     - [[#index-epxressions][Index expressions]]
     - [[#slice-expressions][Slice expressions]]
     - [[#type-assertions][Type assertions]]
     - [[#calls][Calls]]
     - [[#passing-arguments-to-parameters][Passing arguments to ... parameters]]
     - [[#operators][Operators]]
     - [[#arithmetic-operators][Arithmetic operators]]
     - [[#comparison-operators][Comparison operators]]
     - [[#logical-operators][Logical operators]]
     - [[#address-operators][Address operators]]
     - [[#receive-operator][Receive operator]]
     - [[#conversions][Converions]]
     - [[#constant-expressions][Constant expressions]]
     - [[#order-of-evaluation][Order of evaluation]]
   - [[#statements][Statements]]
     - [[#terminating-statements][Terminating statements]]
     - [[#empty-statements][Empty statements]]
     - [[#labeled-statements][Labeled statements]]
     - [[#expression-statements][Expression statements]]
     - [[#send-statements][Send statements]]
     - [[#incdec-statements][IncDec statements]]
     - [[#assignments][Assignments]]
     - [[#if-statements][If statements]]
     - [[#switch-statements][Switch statements]]
     - [[#for-statements][For statements]]
     - [[#go-statements][Go statements]]
     - [[#select-statements][Select statements]]
     - [[#return-statements][Return statements]]
     - [[#break-statements][Break statements]]
     - [[#continue-statements][Continue statements]]
     - [[#goto-statements][Goto statements]]
     - [[#fallthrough-statements][Fallthrough statements]]
     - [[#defer-statements][Defer statements]]
   - [[#built-in-functions][Built-in functions]]
     - [[#close][Close]]
     - [[#length-and-capacity][Length and capacity]]
     - [[#allocation][Allocation]]
     - [[#making-slices-maps-and-channels][Making slices, maps and channels]]
     - [[#appending-to-any-copying-slices][Appending to any copying slices]]
     - [[#deletion-of-map-elements][Deletion of map elements]]
     - [[#manipulating-complex-numbers][Manipulating complex numbers]]
     - [[#handling-panics][Handling panics]]
     - [[#bootstraping][Bootstraping]]
   - [[#packages][Packages]]
     - [[#source-file-organization][Source file organization]]
     - [[#package-clause][Package clause]]
     - [[#import-declarations][Import declarations]]
     - [[#an-example-package][An example package]]
   - [[#program-initialization-and-execution][Program initialization and execution]]
     - [[#the-zero-value][The zero value]]
     - [[#package-initialization][Package initialization]]
     - [[#program-execution][Program execution]]
   - [[#errors][Errors]]
   - [[#run-time-panics][Run-time panics]]
   - [[#system-considerations][System considerations]]
     - [[#package-unsafe][Package unsafe]]
     - [[#size-and-alignment-gurantees][Size and alignment gurantees]]

* Introduction

This is a reference manual for the Go programming language. For more information
and other documents, see [[url:https://golang.org][golang.org]].

Go is a general-purpose language designed with systems programming in mind. It
is strongly typed and garbage-collected and has explicit support for concurrent
programming. Programs are constructed from packages, whose properties allow
efficient management of dependencies. The existing implementations use a
traditional compile/link model to generate executable binaries.

The grammar is compact and regular, allowing for easy analysis by automatic
tools such as integrated development environments.

* Notation

The syntax is specified using Extended Backus-Naur Form (EBNF):

#+BEGIN_SRC bnf
Production  = production_name "=" [ Expression ] "." .
Expression  = Alternative { "|" Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ "…" token ] | Group | Option | Repetition .
Group       = "(" Expression ")" .
Option      = "[" Expression "]" .
Repetition  = "{" Expression "}" .
#+END_SRC

Productions are expressions constructed from terms and the following operators,
in increasing precedence:

#+BEGIN_SRC bnf
|   alternation
()  grouping
[]  option (0 or 1 times)
{}  repetition (0 to n times)
#+BEGIN_SRC

Lower-case production names are used to identify lexical tokens. Non-terminals
are in CamelCase. Lexical tokens are enclosed in double quotes "" or back quotes
``.

The form a … b represents the set of characters from a through b as
alternatives. The horizontal ellipsis … is also used elsewhere in the spec to
informally denote various enumerations or code snippets that are not further
specified. The character … (as opposed to the three characters ...) is not a
token of the Go language.
