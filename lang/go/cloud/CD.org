#+TITLE: Continuous Delivery
#+AUTHOR: Cloud Native Go

* CI & CD

- Automatically building your projects after every Git commit.
- Automatically deploying build artifacts as part of a CI pipeline.

* Tools Needed

** Docker

Docker gives us the ability to create an immutable release that will run
anywhere, regardless of what is or is not installed on the target environment
(Docker, however, does have to be installed)

** Wercker

Continuous intergration best practices:

*** Maintain a code repository
*** Automate the build
*** Make the build self-testing
*** Commit to the baseline every day

*** Build every commit

Every time you check in code, your CI tool should execute a build, which
involves running unit tests, evaluating test coverage, and often running static
analysis tools.

*** Keep the build fast

If you build is too slow or cumbersome to automate, this is a smell that
something else may be wrong. Your builds should be fast, so you can see them
pass or fail quickly. Slow, bulky, prolonged builds eventually become enough of
a nuisance that people start turning them off, or disabling test runs.

*** Test in a production clone
*** Make it easy to get deliverables
*** Everyone can see the results of the latest build
*** Automate deployment

If deploying is a manual process, it becomes an error-prone process. Manual
deployments are slow and cumbersome, and teams tend to avoid them, leading to
longer delays between deploys and a loss of confidence.
