                       _________________________

                        GOLANG TRICKS AND TRAPS

                               Zhou Peng
                       _________________________


1 Item 1: Why cannot take address of const variable.
====================================================

1.1 Go code
~~~~~~~~~~~

  ,----
  | package main
  |
  | const PI = 3.1415926
  |
  | func main() {
  |         println(&PI, PI)
  | }
  `----


1.2 Compile
~~~~~~~~~~~

  ,----
  | go build -x test.go
  | test.go:6: cannot take the address of PI
  `----


1.3 Notes
~~~~~~~~~

  Compiler would replace const var with the exact literal for
  optimization. so the last code compiled may look like this:

  ,----
  | package main
  |
  | func main() {
  |         println(&3.1415926, 3.1415926)
  | }
  `----

  Compiler literal can not be addressed.


2 Item 2: switch-case-default isn't like C language.
====================================================

2.1 Code
~~~~~~~~

  ,----
  | package main
  |
  | func main() {
  |         switch x := 5; x {
  |         default:
  |                 x += 10
  |                 println(x)
  |         case 5:
  |                 x += 50
  |                 println(x)
  |                 fallthrough
  |         case 6:
  |                 x += 45
  |                 println(x)
  |         }
  | }
  `----

  ,----
  | #include <stdio.h>
  |
  | int main(void)
  | {
  |         int x = 5;
  |         switch (x) {
  |         default:
  |                 x += 10;
  |                 printf("%d\n", x);
  |         case 5:
  |                 x += 50;
  |                 printf("%d\n", x);
  |         case 6:
  |                 x += 45;
  |                 printf("%d\n", x);
  |         }
  |
  |         return 0;
  | }
  `----


2.2 Notes
~~~~~~~~~

  C language switch case matched will fall through to the next case
  statement by default, which leads to many bugs.

  Golang has the more natural behavior that you must explicitly use
  *fallthrough* key word to flow to the next case statement.

  Both C and Go switch *default* case will be matched last no matter
  where it is placed.


3 Item 3: Why range statement cannot change array.
==================================================

3.1 Code
~~~~~~~~

  ,----
  | package main
  |
  | import "fmt"
  |
  | func main() {
  |         a := [3]int{10, 20, 30}
  |         for _, e := range a {
  |                 a[0] += 100
  |                 a[1] += 100
  |                 a[2] += 100
  |                 fmt.Printf("%d: %#v\n", e, a)
  |         }
  |
  |         s := []int{10, 20, 30}
  |         for _, e := range s {
  |                 s[0] += 100
  |                 s[1] += 100
  |                 s[2] += 100
  |                 fmt.Printf("%d: %#v\n", e, s)
  |         }
  | }
  `----


3.2 Run
~~~~~~~

  ,----
  | go run test.go
  | 10: [3]int{110, 120, 130}
  | 20: [3]int{210, 220, 230}
  | 30: [3]int{310, 320, 330}
  | 10: []int{110, 120, 130}
  | 120: []int{210, 220, 230}
  | 230: []int{310, 320, 330}
  `----


3.3 Notes
~~~~~~~~~

  Golang range will copy data (array, slice, channel etc) what is
  ranged, because golang array is value type, so the whole array will be
  copied and iterate will return the copied data (you just changed the
  origin data).

  If range a function call, ranged function will be called only once.


4 Item 4: Is that safe returning address of local variables.
============================================================

4.1 Code
~~~~~~~~

  ,----
  | package main
  |
  | import (
  |         "fmt"
  | )
  |
  | type Location struct {
  |         loc float64
  |         log float64
  | }
  |
  | func newLocation() *Location {
  |         loc := Location{}
  |         return &loc
  | }
  |
  | func main() {
  |         loc := newLocation()
  |         fmt.Printf("%#v\n", loc)
  | }
  `----


4.2 Compile
~~~~~~~~~~~

  ,----
  | go build -x -gcflags "-m -l" test.go
  | # command-line-arguments
  | ./test.go:14: &loc escapes to heap
  | ./test.go:13: moved to heap: loc
  | ./test.go:19: loc escapes to heap
  | ./test.go:19: main ... argument does not escape
  `----


4.3 Notes
~~~~~~~~~

  Golang compiler will analyze code to determine if a variable should be
  allocated on stack or on heap. Go not like C does not strictly
  differentiate stack and heap variable, compiler may place stack
  variable on heap when var referenced out of the function that defined
  it. yet place heap variable on stack for performance improvment if the
  program's behavior not changed.


5 Item 5: Loop variable shared by multiple goroutines, is that you expect.
==========================================================================

5.1 Code
~~~~~~~~

  ,----
  | package main
  |
  | func pr(i int) {
  |         println(i)
  | }
  |
  | func main() {
  |         a := []int{1, 2, 3, 4, 5}
  |
  |         for i := range a {
  |                 go func() {
  |                         pr(i)
  |                 }()
  |         }
  | }
  `----


5.2 Vet
~~~~~~~

  ,----
  | go vet pr.go
  | range variable i captured by func literal
  `----

  ,----
  | package main
  |
  | func pr(i int) {
  |         println(i)
  | }
  |
  | func main() {
  |         a := []int{1, 2, 3, 4, 5}
  |
  |         for i := range a {
  |                 go pr(i)
  |         }
  | }
  `----


5.3 Run
~~~~~~~

  ,----
  | go build -gcflags "-l -m" pr.go
  | ./pr.go:8: main []int literal does not escape
  |
  | go tool objdump -s "main.main" pr
  | TEXT main.main(SB) /tmp/pr.go
  |         pr.go:7		0x44d6a0	64488b0c25f8ffffff	FS MOVQ FS:0xfffffff8, CX
  |         pr.go:7		0x44d6a9	483b6110		CMPQ 0x10(CX), SP
  |         pr.go:7		0x44d6ad	0f8680000000		JBE 0x44d733
  |         pr.go:7		0x44d6b3	4883ec50		SUBQ $0x50, SP
  |         pr.go:7		0x44d6b7	48896c2448		MOVQ BP, 0x48(SP)
  |         pr.go:7		0x44d6bc	488d6c2448		LEAQ 0x48(SP), BP
  |         pr.go:8		0x44d6c1	488b0578250200		MOVQ 0x22578(IP), AX
  |         pr.go:8		0x44d6c8	4889442420		MOVQ AX, 0x20(SP)
  |         pr.go:8		0x44d6cd	488d7c2428		LEAQ 0x28(SP), DI
  |         pr.go:8		0x44d6d2	488d356f250200		LEAQ 0x2256f(IP), SI
  |         pr.go:8		0x44d6d9	48896c24f0		MOVQ BP, -0x10(SP)
  |         pr.go:8		0x44d6de	488d6c24f0		LEAQ -0x10(SP), BP
  |         pr.go:8		0x44d6e3	e83cafffff		CALL 0x448624
  |         pr.go:8		0x44d6e8	488b6d00		MOVQ 0(BP), BP
  |         pr.go:8		0x44d6ec	31c0			XORL AX, AX
  |         pr.go:10	0x44d6ee	4889442418		MOVQ AX, 0x18(SP)
  |         pr.go:10	0x44d6f3	4883f805		CMPQ $0x5, AX
  |         pr.go:10	0x44d6f7	7d30			JGE 0x44d729
  |         pr.go:11	0x44d6f9	4889442410		MOVQ AX, 0x10(SP)
  |         pr.go:11	0x44d6fe	c7042408000000		MOVL $0x8, 0(SP)
  |         pr.go:11	0x44d705	488d0d14fc0100		LEAQ 0x1fc14(IP), CX
  |         pr.go:11	0x44d70c	48894c2408		MOVQ CX, 0x8(SP)
  |         pr.go:11	0x44d711	e80addfdff		CALL runtime.newproc(SB)
  |         pr.go:10	0x44d716	488b442418		MOVQ 0x18(SP), AX
  |         pr.go:10	0x44d71b	48ffc0			INCQ AX
  |         pr.go:10	0x44d71e	4889442418		MOVQ AX, 0x18(SP)
  |         pr.go:10	0x44d723	4883f805		CMPQ $0x5, AX
  |         pr.go:10	0x44d727	7cd0			JL 0x44d6f9
  |         pr.go:13	0x44d729	488b6c2448		MOVQ 0x48(SP), BP
  |         pr.go:13	0x44d72e	4883c450		ADDQ $0x50, SP
  |         pr.go:13	0x44d732	c3			RET
  |         pr.go:7		0x44d733	e85885ffff		CALL runtime.morestack_noctxt(SB)
  |         pr.go:7		0x44d738	e963ffffff		JMP main.main(SB)
  `----


5.4 Notes
~~~~~~~~~

  Loop var *i* will be reused each loop, so goroutines in this example
  will drive compiler to place *i* in heap and be shared.

  In the second code example, goroutine will copy the *i* to its stack
  before started, so this version will do thing that we expected.


6 Item 6: What's the magic under variable arguments.
====================================================

6.1 Code
~~~~~~~~

  ,----
  | package main
  |
  | import (
  |         "fmt"
  | )
  |
  | func vprint(a ...int) {
  |         for i := range a {
  |                 a[i] += 10 // we can change the under array of the variable arg slice.
  |         }
  |         fmt.Printf("%T, %v\n", a, a)
  | }
  |
  | func main() {
  |         vprint(1, 2, 3, 4) // variable args is just slice of same type array
  |
  |         a := [3]int{1, 2, 3}
  |         vprint(a[:]...) // you must get slice first
  | }
  `----


6.2 Run
~~~~~~~

  ,----
  | go run var.go
  | []int, [11 12 13 14]
  | []int, [11 12 13]
  `----


6.3 Notes
~~~~~~~~~

  Golang variable arguments is a slice of array. Array used as arguments
  must be converted to slice first then use *...* syntax to tell
  compiler expand to multiple single argument.


7 Item 7: defer is not at no price.
===================================

7.1 Code
~~~~~~~~

  ,----
  | package test
  |
  | import (
  |         "sync"
  |         "testing"
  | )
  |
  | var m sync.Mutex
  |
  | func call() {
  |         m.Lock()
  |         m.Unlock()
  | }
  |
  | func deferCall() {
  |         m.Lock()
  |         defer m.Unlock()
  | }
  |
  | func BenchmarkCall(b *testing.B) {
  |         for i := 0; i < b.N; i++ {
  |                 call()
  |         }
  | }
  |
  | func BenchmarkDeferCall(b *testing.B) {
  |         for i := 0; i < b.N; i++ {
  |                 deferCall()
  |         }
  | }
  `----


7.2 Run Test
~~~~~~~~~~~~

  ,----
  | go test -bench=".*" defer_test.go
  | BenchmarkCall-4        	100000000	        19.2 ns/op
  | BenchmarkDeferCall-4   	20000000	        63.5 ns/op
  | PASS
  | ok  	command-line-arguments	3.283s
  `----


7.3 Notes
~~~~~~~~~

  Golang defer has a performance loss about three times slower than
  nornaml function call. So don't treat it like a free launch even it is
  delicious.


8 Item 8: Reserved package names you should know.
=================================================

8.1 Notes
~~~~~~~~~

  There are four reserved names for paths that should NOT be used for
  packages to be built with the go tool:

  - "main" denotes the top-level package in a stand-alone executable.

  - "all" expands to all package directories found in the GOPATH trees.
    For example, 'go list all' lists all the packages on the local
    system.

  - "std" is like all but expands to just the packages in the standard
    Go library.

  - "cmd" expands to the Go repository's commands and their internal
    libraries, import path beginning with "cmd/" only match source code
    in the Go repository.


8.2 Test
~~~~~~~~

  ,----
  | go test std
  | ok  	archive/tar	0.048s
  | ok  	archive/zip	31.057s
  | ok  	bufio	0.103s
  | ok  	bytes	2.182s
  | ok  	compress/bzip2	0.160s
  | ...
  `----


9 Item 9: I use pointer everywhere for performance accounted.
=============================================================

9.1 Code
~~~~~~~~

  ,----
  | package main
  |
  | import "fmt"
  |
  | type Location struct {
  |         loc float64
  |         log float64
  | }
  |
  | func (l *Location) String() string {
  |         return fmt.Sprintf("<%f, %f>", l.loc, l.log)
  | }
  |
  | func (l *Location) Reverse() {
  |         l.loc, l.log = l.log, l.loc
  | }
  |
  | func main() {
  |         l := Location{loc: 101.7, log: 98.2}
  |
  |         fmt.Println(l)
  |
  |         l.Reverse()
  |         fmt.Println(l)
  | }
  `----


9.2 Compile
~~~~~~~~~~~

  ,----
  | go build -gcflags "-l -m" loc.go
  | # command-line-arguments
  | ./loc.go:11: l.loc escapes to heap
  | ./loc.go:11: l.log escapes to heap
  | ./loc.go:10: (*Location).String l does not escape
  | ./loc.go:11: (*Location).String ... argument does not escape
  | ./loc.go:14: (*Location).Reverse l does not escape
  | ./loc.go:21: l escapes to heap
  | ./loc.go:24: l escapes to heap
  | ./loc.go:21: main ... argument does not escape
  | ./loc.go:23: main l does not escape
  | ./loc.go:24: main ... argument does not escape
  `----


9.3 Notes
~~~~~~~~~

  The compiler has detected that *l* should be allocated on heap, so the
  GC take the responsibility to manage lifecycle of *l*, that means more
  CPU cycles consumed by GC, yet means lower performance.

  Pointer vs Object
   Scenario       Use Pointer  Use Object
  ----------------------------------------
   Small Object   no           yes
   Modify Object  yes          no


10 Item 10: Passing by value, show me more details.
===================================================

10.1 Code
~~~~~~~~~

  ,----
  | package main
  |
  | func pr(a [3]int) {
  |         println(&a)
  |         for _, i := range a {
  |                 println(i)
  |         }
  | }
  |
  | func main() {
  |         a := [3]int{1, 2, 3}
  |         println(&a)
  |
  |         pr(a)
  | }
  `----


10.2 Run
~~~~~~~~

  ,----
  | go run pr.go
  | 0xc420037f60
  | 0xc420037f48
  | 1
  | 2
  | 3
  `----


10.3 Notes
~~~~~~~~~~

  Array is value type, so passing by value will copy the whole array.


11 Item 11: Array length is part of the new array type.
=======================================================

11.1 Code
~~~~~~~~~

  ,----
  | package main
  |
  | import "fmt"
  |
  | func main() {
  |         a := [...]int{1, 2, 3, 4}
  |         b := [...]int{5, 6}
  |
  |         fmt.Printf("a: %T\n", a)
  |         fmt.Printf("b: %T\n", b)
  | }
  `----


11.2 Run
~~~~~~~~

  ,----
  | a: [4]int
  | b: [2]int
  `----


11.3 Notes
~~~~~~~~~~

  *%T* tell fmt print out the variable's type name. *[4]int* and
  *[2]int* are two different types.


12 Item 12: Golang builtin type map's value not addressable.
============================================================

12.1 Code
~~~~~~~~~

  ,----
  | package main
  |
  | func main() {
  |         type user struct {
  |                 name string
  |                 age  byte
  |         }
  |         m := map[int]user{
  |                 1: {"Tom", 19},
  |         }
  |
  |         m[1].age += 1
  | }
  `----


12.2 Compile
~~~~~~~~~~~~

  ,----
  | go build map.go
  | # command-line-arguments
  | ./map.go:12: cannot assign to struct field m[1].age in map
  `----


12.3 Code
~~~~~~~~~

  ,----
  | package main
  |
  | func main() {
  |         type user struct {
  |                 name string
  |                 age  byte
  |         }
  |
  |         m1 := map[int]user{
  |                 1: {"Tom", 19},
  |         }
  |         u := m1[1]
  |         u.age += 1
  |         m1[1] = u
  |
  |         m2 := map[int]*user{
  |                 1: &user{"Tom", 19},
  |         }
  |
  |         m2[1].age += 1
  | }
  `----


12.4 Notes
~~~~~~~~~~

  Golang map is designed "not addressable", if you want to change the
  stored value, you have two ways:

  - Use value pointer type
  - Set the whole value again


13 Item 13: Golang func vs method.
==================================

13.1 func vs method
~~~~~~~~~~~~~~~~~~~

  - method is associated with an object.
  - func receive parameters and execute algorithm, then return result.
  - method is stateful, but func is stateless.


14 Item 14: Method receiver T or *T.
====================================

14.1 Code
~~~~~~~~~

  ,----
  | package main
  |
  | import (
  |         "fmt"
  | )
  |
  | type N int
  |
  | func (n N) value() {
  |         n++
  |         fmt.Printf("v: %p, %v\n", &n, n)
  | }
  |
  | func (n *N) pointer() {
  |         (*n)++
  |         fmt.Printf("p: %p, %v\n", n, *n)
  | }
  |
  | func main() {
  |         var v N = 25
  |         p := &v
  |
  |         v.value()
  |         p.pointer()
  |
  |         // compiler will convert between T and *T automatically
  |         v.pointer()
  |         p.value()
  |
  |         fmt.Printf("a: %p, %v\n", &v, v)
  | }
  `----


14.2 Run
~~~~~~~~

  ,----
  | go run method.go
  | v: 0xc42000e260, 26
  | p: 0xc42000e238, 26
  | p: 0xc42000e238, 27
  | v: 0xc42000e298, 28
  | a: 0xc42000e238, 27
  `----


14.3 Notes
~~~~~~~~~~

  - need to modify object, use *T
  - small object or fixed value, no modify, use T
  - huge object use *T first, for sake of copying cost
  - object include sync.Mutex, use *T, avoid copying Mutex leads to lock
    failed
  - all other situations, use *T first


15 Item 15: 10 things you probably don't know about Golang.
===========================================================

15.1 Anonymous structs
~~~~~~~~~~~~~~~~~~~~~~

15.1.1 Grouped globals
----------------------

  ,----
  | var config struct {
  |         APIKey      string
  |         OAuthConfig oauth.Config
  | }
  |
  | config.APIKey = "BADC0C0A"
  `----


15.1.2 Template data
--------------------

  ,----
  | data := struct {
  |         Title string
  |         Users []*User
  | }{
  |         title,
  |         users,
  | }
  | err := tmpl.Execute(w, data)
  `----


15.1.3 Test tables
------------------

  ,----
  | var indexRuneTests = []struct {
  |         s    string
  |         rune rune
  |         out  int
  | }{
  |         {"a A a", 'A', 2},
  |         {"some_text=some_value", '=', 9},
  |         {"aa", 'a', 3},
  |         {"bb", 'b', 4},
  | }
  `----


15.1.4 Embedded lock
--------------------

  ,----
  | var hits struct {
  |         sync.Mutex
  |         n int
  | }
  | hits.Lock()
  | hits.n++
  | hits.Unlock()
  `----


15.2 Nested structs
~~~~~~~~~~~~~~~~~~~

15.2.1 Decoding deeply nested JSON data
---------------------------------------

  ,----
  | {
  |   "data": {
  |     "children": [
  |       {"data": {
  |         "title": "The Go homepage",
  |         "url": "http://golang.org/"
  |       }},
  |       ...
  |     ]
  |   }
  | }
  `----

  ,----
  | type Item struct {
  |         Title string
  |         URL   string
  | }
  |
  | type Response struct {
  |         Data struct {
  |                 Children []struct{
  |                         Data Item
  |                 }
  |         }
  | }
  `----


15.3 Comand-line godoc
~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | % godoc sync Mutex
  | PACKAGE
  |
  | package sync
  |     import "sync"
  |
  | TYPES
  |
  | type Mutex struct {
  |         // contains filtered or unexported fields
  | }
  |         A Mutex is a mutual exclusion lock. Mutexes can be created as part of
  |         other structures; the zero value for a Mutex is an unlocked mutex.
  |
  | func (m *Mutex) Lock()
  |         Lock locks m. If the lock is already in use, the calling goroutine
  |         blocks until the mutex is available.
  |
  | ... ...
  `----


15.4 godoc -src
~~~~~~~~~~~~~~~

  ,----
  | % godoc -src sync Mutex
  | // A Mutex is a mutual exclusion lock.
  | // Mutexes can be created as part of other structures;
  | // the zero value for a Mutex is an unlocked mutex.
  | type Mutex struct {
  |         state int32
  |         sema  uint32
  | }
  `----


15.5 go get supports custom domains
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | go get camlistore.org/pkg/netutil
  `----

  See `go help importpath` for the details.


15.6 Mock out the file system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Got a package that works with the file system, but don't want your
  tests to actually use the disk?

  ,----
  | var fs fileSystem = osFS{}
  |
  | type fileSystem interface {
  |         Open(name string) (file, error)
  |         Stat(name string) (os.FileInfo, error)
  | }
  |
  | type file interface {
  |         io.Closer
  |         io.Reader
  |         io.ReaderAt
  |         io.Seeker
  |         Stat() (os.FileInfo, error)
  | }
  |
  | // osFS implements fileSystem using the local disk.
  | type osFS struct{}
  |
  | func (osFS) Open(name string) (file, error)        { return os.Open(name) }
  | func (osFS) Stat(name string) (os.FileInfo, error) { return os.Stat(name) }
  `----


15.7 Method expressions
~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | type T struct{}
  | func (T) Foo(s string) { println(s) }
  |
  | var fn func(T, string) = T.Foo
  `----

  Real example from os/exec:

  ,----
  | func (c *Cmd) stdin() (f *os.File, err error)
  | func (c *Cmd) stdout() (f *os.File, err error)
  | func (c *Cmd) stderr() (f *os.File, err error)
  |
  | type F func(*Cmd) (*os.File, error)
  | for _, setupFd := range []F{(*Cmd).stdin, (*Cmd).stdout, (*Cmd).stderr} {
  |         fd, err := setupFd(c)
  |         if err != nil {
  |                 c.closeDescriptors(c.closeAfterStart)
  |                 c.closeDescriptors(c.CloseAfterWait)
  |                 return err
  |         }
  |         c.childFiles = append(c.childFiles, fd)
  | }
  `----


15.8 Send and receive on the same channel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | package main
  |
  | import "fmt"
  |
  | var battle = make(chan string)
  |
  | func warrior(name string, done chan struct{}) {
  |         select {
  |         case opponent := <-battle:
  |                 fmt.Printf("%s beat %s\n", name, opponent)
  |         case battle <- name:
  |                 // I lost :-(
  |         }
  |         done <- struct{}{}
  | }
  |
  | func main() {
  |         done := make(chan struct{})
  |         langs := []string{"Go", "C", "C++", "Java", "Perl", "Python"}
  |         for _, l := range langs {
  |                 go warrior(l, done)
  |         }
  |         for _ = range langs {
  |                 <-done
  |         }
  | }
  `----


15.9 Using close to broadcast
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | func waiter(i int, block, done chan struct{}) {
  |         time.Sleep(time.Duration(rand.Intn(3000)) * time.Millisecond)
  |         fmt.Println(i, "waiting...")
  |         <-block
  |         fmt.Println(i, "done!")
  |         done <- struct{}{}
  | }
  |
  | func main() {
  |         block, done := make(chan struct{}), make(chan struct{})
  |         for i := 0; i < 4; i++ {
  |                 go waiter(i, block, done)
  |         }
  |         time.Sleep(5 * time.Second)
  |         close(block)
  |         for i := 0; i < 4; i++ {
  |                 <-done
  |         }
  | }
  `----

  Using close to broadcast

  ,----
  | func worker(i int, ch chan Work, quit chan struct{}) {
  |         var quitting bool
  |         for {
  |                 select {
  |                 case w := <-ch:
  |                         if quitting {
  |                                 w.Refuse()
  |                                 fmt.Println("worker", i, "refused", w)
  |                                 break
  |                         }
  |                         w.Do()
  |                         fmt.Println("worker", i, "processed", w)
  |                 case <-quit:
  |                         fmt.Println("worker", i, "quitting")
  |                         quitting = true
  |                 }
  |         }
  | }
  |
  | func main() {
  |         ch, quit := make(chan Work), make(chan struct{})
  |         go makeWork(ch)
  |         for i := 0; i < 4; i+= {
  |                 go worker(i, ch, quit)
  |         }
  |         time.Sleep(5 * time.Second)
  |         close(quit)
  |         time.Sleep(2 * time.Second)
  | }
  `----


15.10 Nil channel in select
~~~~~~~~~~~~~~~~~~~~~~~~~~~

  ,----
  | func worker(i int, ch chan Work, quit chan struct{}) {
  |         for {
  |                 select {
  |                 case w := <-ch:
  |                         if quit == nil {
  |                                 w.Refuse();
  |                                 fmt.Println("worker", i, "refused", w)
  |                                 break
  |                         }
  |                         w.Do()
  |                         fmt.Println("worker", i, "processed", w)
  |                 case <-quit:
  |                         fmt.Println("worker", i, "quitting")
  |                         quit = nil
  |                 }
  |         }
  | }
  |
  | func main() {
  |         ch, quit := make(chan Work), make(chan struct{})
  |         go makeWork(ch)
  |         for i := 0; i < 4; i++ {
  |                 go worker(i, ch, quit)
  |         }
  |         time.Sleep(5 * time.Second)
  |         close(quit)
  |         time.Sleep(2 * time.Second)
  | }
  `----


16 Item 16: Send/Receive closed and nil channel.
================================================

16.1 Closed vs nil channel
~~~~~~~~~~~~~~~~~~~~~~~~~~

  - Send to closed channel, got pannic.
  - Receive from closed channel, got buffered data or zero data.
  - Both send and receive from/to nil channel, got blocked.


16.2 Code
~~~~~~~~~

  ,----
  | package main
  |
  | import (
  |         "sync"
  | )
  |
  | func main() {
  |         var wg sync.WaitGroup
  |         wg.Add(3)
  |
  |         a, b := make(chan int), make(chan int)
  |
  |         go func() {
  |                 defer wg.Done()
  |                 for {
  |                         select {
  |                         case x, ok := <-a:
  |                                 if !ok {
  |                                         a = nil // nil channel blocked, select will choose other case stmt
  |                                         break
  |                                 }
  |                                 println("a:", x)
  |                         case x, ok := <-b:
  |                                 if !ok {
  |                                         b = nil // nil channel blocked, select will choose other case stmt
  |                                         break
  |                                 }
  |                                 println("b:", x)
  |                         }
  |
  |                         if a == nil && b == nil {
  |                                 return
  |                         }
  |                 }
  |         }()
  |
  |         go func() {
  |                 defer wg.Done()
  |                 defer close(a)
  |                 for i := 0; i < 3; i++ {
  |                         a <- i
  |                 }
  |         }()
  |
  |         go func() {
  |                 defer wg.Done()
  |                 defer close(b)
  |                 for i := 0; i < 3; i++ {
  |                         b <- i * 10
  |
  |                 }
  |         }()
  |
  |         wg.Wait()
  | }
  `----


17 Item 17: Channel and sync, which one should I choose.
========================================================

17.1 Golang chan vs sync
~~~~~~~~~~~~~~~~~~~~~~~~

  - chan is better for logical concurrent architecture.
  - sync is better for local data concurrent access.


18 Item 18: When to panic().
============================

18.1 Never?
~~~~~~~~~~~

  panic() in a spawned goroutine is the worst, panic is usually ok if:

  - Functions begins with MustXYZ()
  - Operations on nil


18.2 Code
~~~~~~~~~

  ,----
  | func MustCompile(str string) *Regexp {
  |         regexp, err := Compile(str)
  |         if err != nil {
  |                 panic(err)
  |         }
  |         return regexp
  | }
  `----
